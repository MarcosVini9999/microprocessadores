

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Tue Jul 19 20:29:42 2022

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=2
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=2
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=2
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=2
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1,inline
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1
    28                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    29                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    30                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    31                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    32                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    33  0000                     
    34                           ; Version 2.10
    35                           ; Generated 31/07/2019 GMT
    36                           ; 
    37                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    38                           ; All rights reserved.
    39                           ; 
    40                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    41                           ; 
    42                           ; Redistribution and use in source and binary forms, with or without modification, are
    43                           ; permitted provided that the following conditions are met:
    44                           ; 
    45                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    46                           ;        conditions and the following disclaimer.
    47                           ; 
    48                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    49                           ;        of conditions and the following disclaimer in the documentation and/or other
    50                           ;        materials provided with the distribution.
    51                           ; 
    52                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    53                           ;        software without specific prior written permission.
    54                           ; 
    55                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    56                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    57                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    58                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    59                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    60                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    61                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    62                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    63                           ; 
    64                           ; 
    65                           ; Code-generator required, PIC18F4550 Definitions
    66                           ; 
    67                           ; SFR Addresses
    68  0000                     _PORTDbits	set	3971
    69  0000                     _TMR2	set	4044
    70  0000                     _INTCONbits	set	4082
    71  0000                     _T2CONbits	set	4042
    72  0000                     _TRISD	set	3989
    73  0000                     _TRISBbits	set	3987
    74  0000                     _INT0IF	set	32657
    75  0000                     _INTEDG0	set	32654
    76                           
    77                           	psect	smallconst
    78  000800                     __psmallconst:
    79                           	opt callstack 0
    80  000800  00                 	db	0
    81  000801                     STR_2:
    82  000801  4C                 	db	76	;'L'
    83  000802  61                 	db	97	;'a'
    84  000803  72                 	db	114	;'r'
    85  000804  67                 	db	103	;'g'
    86  000805  75                 	db	117	;'u'
    87  000806  72                 	db	114	;'r'
    88  000807  61                 	db	97	;'a'
    89  000808  2B                 	db	43
    90  000809  20                 	db	32
    91  00080A  3D                 	db	61	;'='
    92  00080B  20                 	db	32
    93  00080C  25                 	db	37
    94  00080D  64                 	db	100	;'d'
    95  00080E  00                 	db	0
    96  00080F                     STR_1:
    97  00080F  54                 	db	84	;'T'
    98  000810  4D                 	db	77	;'M'
    99  000811  52                 	db	82	;'R'
   100  000812  32                 	db	50	;'2'
   101  000813  20                 	db	32
   102  000814  3D                 	db	61	;'='
   103  000815  20                 	db	32
   104  000816  25                 	db	37
   105  000817  64                 	db	100	;'d'
   106  000818  00                 	db	0
   107                           
   108                           ; #config settings
   109  000819  00                 	db	0	; dummy byte at the end
   110  0000                     
   111                           	psect	cinit
   112  001458                     __pcinit:
   113                           	opt callstack 0
   114  001458                     start_initialization:
   115                           	opt callstack 0
   116  001458                     __initialization:
   117                           	opt callstack 0
   118                           
   119                           ; Clear objects allocated to BANK0 (41 bytes)
   120  001458  EE00  F060         	lfsr	0,__pbssBANK0
   121  00145C  0E29               	movlw	41
   122  00145E                     clear_0:
   123  00145E  6AEE               	clrf	postinc0,c
   124  001460  06E8               	decf	wreg,f,c
   125  001462  E1FD               	bnz	clear_0
   126  001464                     end_of_initialization:
   127                           	opt callstack 0
   128  001464                     __end_of__initialization:
   129                           	opt callstack 0
   130  001464  905F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   131  001466  925F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   132  001468  0E00               	movlw	low (__Lsmallconst shr (0+16))
   133  00146A  6EF8               	movwf	tblptru,c
   134  00146C  0E08               	movlw	high __Lsmallconst
   135  00146E  6EF7               	movwf	tblptrh,c
   136  001470  0100               	movlb	0
   137  001472  EF01  F009         	goto	_main	;jump to C main() function
   138                           
   139                           	psect	bssBANK0
   140  000060                     __pbssBANK0:
   141                           	opt callstack 0
   142  000060                     _nout:
   143                           	opt callstack 0
   144  000060                     	ds	2
   145  000062                     _width:
   146                           	opt callstack 0
   147  000062                     	ds	2
   148  000064                     _prec:
   149                           	opt callstack 0
   150  000064                     	ds	2
   151  000066                     _flags:
   152                           	opt callstack 0
   153  000066                     	ds	2
   154  000068                     _cont:
   155                           	opt callstack 0
   156  000068                     	ds	1
   157  000069                     _dbuf:
   158                           	opt callstack 0
   159  000069                     	ds	32
   160                           
   161                           	psect	cstackBANK0
   162  000089                     __pcstackBANK0:
   163                           	opt callstack 0
   164  000089                     ?_printf:
   165                           	opt callstack 0
   166  000089                     printf@fmt:
   167                           	opt callstack 0
   168                           
   169                           ; 2 bytes @ 0x0
   170  000089                     	ds	6
   171  00008F                     printf@ap:
   172                           	opt callstack 0
   173                           
   174                           ; 2 bytes @ 0x6
   175  00008F                     	ds	2
   176                           
   177                           	psect	cstackCOMRAM
   178  000001                     __pcstackCOMRAM:
   179                           	opt callstack 0
   180  000001                     ??_envia_nibble_lcd:
   181  000001                     ?_strlen:
   182                           	opt callstack 0
   183  000001                     ?___aodiv:
   184                           	opt callstack 0
   185  000001                     ?___aomod:
   186                           	opt callstack 0
   187  000001                     strlen@s:
   188                           	opt callstack 0
   189  000001                     ___aodiv@dividend:
   190                           	opt callstack 0
   191  000001                     ___aomod@dividend:
   192                           	opt callstack 0
   193                           
   194                           ; 8 bytes @ 0x0
   195  000001                     	ds	1
   196  000002                     envia_nibble_lcd@dado:
   197                           	opt callstack 0
   198                           
   199                           ; 1 bytes @ 0x1
   200  000002                     	ds	1
   201  000003                     envia_byte_lcd@dado:
   202                           	opt callstack 0
   203  000003                     strlen@a:
   204                           	opt callstack 0
   205                           
   206                           ; 2 bytes @ 0x2
   207  000003                     	ds	1
   208  000004                     envia_byte_lcd@endereco:
   209                           	opt callstack 0
   210                           
   211                           ; 1 bytes @ 0x3
   212  000004                     	ds	1
   213  000005                     ??_inicializa_lcd:
   214  000005                     escreve_lcd@c:
   215                           	opt callstack 0
   216  000005                     caracter_inicio@coluna:
   217                           	opt callstack 0
   218                           
   219                           ; 1 bytes @ 0x4
   220  000005                     	ds	1
   221  000006                     putch@data:
   222                           	opt callstack 0
   223  000006                     caracter_inicio@linha:
   224                           	opt callstack 0
   225                           
   226                           ; 1 bytes @ 0x5
   227  000006                     	ds	1
   228  000007                     caracter_inicio@posicao:
   229                           	opt callstack 0
   230  000007                     fputc@c:
   231                           	opt callstack 0
   232                           
   233                           ; 2 bytes @ 0x6
   234  000007                     	ds	2
   235  000009                     fputc@fp:
   236                           	opt callstack 0
   237  000009                     ___aodiv@divisor:
   238                           	opt callstack 0
   239  000009                     ___aomod@divisor:
   240                           	opt callstack 0
   241                           
   242                           ; 8 bytes @ 0x8
   243  000009                     	ds	2
   244  00000B                     ??_fputc:
   245                           
   246                           ; 1 bytes @ 0xA
   247  00000B                     	ds	5
   248  000010                     fputs@s:
   249                           	opt callstack 0
   250                           
   251                           ; 2 bytes @ 0xF
   252  000010                     	ds	1
   253  000011                     ___aodiv@counter:
   254                           	opt callstack 0
   255  000011                     ___aomod@counter:
   256                           	opt callstack 0
   257                           
   258                           ; 1 bytes @ 0x10
   259  000011                     	ds	1
   260  000012                     ___aodiv@sign:
   261                           	opt callstack 0
   262  000012                     ___aomod@sign:
   263                           	opt callstack 0
   264  000012                     fputs@fp:
   265                           	opt callstack 0
   266                           
   267                           ; 2 bytes @ 0x11
   268  000012                     	ds	1
   269  000013                     ?_abs:
   270                           	opt callstack 0
   271  000013                     abs@a:
   272                           	opt callstack 0
   273  000013                     ___aodiv@quotient:
   274                           	opt callstack 0
   275                           
   276                           ; 8 bytes @ 0x12
   277  000013                     	ds	1
   278  000014                     fputs@c:
   279                           	opt callstack 0
   280                           
   281                           ; 1 bytes @ 0x13
   282  000014                     	ds	1
   283  000015                     ??_abs:
   284  000015                     fputs@i:
   285                           	opt callstack 0
   286                           
   287                           ; 2 bytes @ 0x14
   288  000015                     	ds	2
   289  000017                     ?_pad:
   290                           	opt callstack 0
   291  000017                     pad@fp:
   292                           	opt callstack 0
   293                           
   294                           ; 2 bytes @ 0x16
   295  000017                     	ds	2
   296  000019                     pad@buf:
   297                           	opt callstack 0
   298                           
   299                           ; 2 bytes @ 0x18
   300  000019                     	ds	2
   301  00001B                     pad@p:
   302                           	opt callstack 0
   303                           
   304                           ; 2 bytes @ 0x1A
   305  00001B                     	ds	2
   306  00001D                     ??_pad:
   307                           
   308                           ; 1 bytes @ 0x1C
   309  00001D                     	ds	1
   310  00001E                     pad@i:
   311                           	opt callstack 0
   312                           
   313                           ; 2 bytes @ 0x1D
   314  00001E                     	ds	2
   315  000020                     pad@w:
   316                           	opt callstack 0
   317                           
   318                           ; 2 bytes @ 0x1F
   319  000020                     	ds	2
   320  000022                     ?_dtoa:
   321                           	opt callstack 0
   322  000022                     dtoa@fp:
   323                           	opt callstack 0
   324                           
   325                           ; 2 bytes @ 0x21
   326  000022                     	ds	2
   327  000024                     dtoa@d:
   328                           	opt callstack 0
   329                           
   330                           ; 8 bytes @ 0x23
   331  000024                     	ds	8
   332  00002C                     ??_dtoa:
   333                           
   334                           ; 1 bytes @ 0x2B
   335  00002C                     	ds	8
   336  000034                     _dtoa$350:
   337                           	opt callstack 0
   338                           
   339                           ; 2 bytes @ 0x33
   340  000034                     	ds	2
   341  000036                     dtoa@p:
   342                           	opt callstack 0
   343                           
   344                           ; 2 bytes @ 0x35
   345  000036                     	ds	2
   346  000038                     dtoa@w:
   347                           	opt callstack 0
   348                           
   349                           ; 2 bytes @ 0x37
   350  000038                     	ds	2
   351  00003A                     dtoa@s:
   352                           	opt callstack 0
   353                           
   354                           ; 2 bytes @ 0x39
   355  00003A                     	ds	2
   356  00003C                     dtoa@n:
   357                           	opt callstack 0
   358                           
   359                           ; 8 bytes @ 0x3B
   360  00003C                     	ds	8
   361  000044                     dtoa@i:
   362                           	opt callstack 0
   363                           
   364                           ; 2 bytes @ 0x43
   365  000044                     	ds	2
   366  000046                     ?_vfpfcnvrt:
   367                           	opt callstack 0
   368  000046                     vfpfcnvrt@fp:
   369                           	opt callstack 0
   370                           
   371                           ; 2 bytes @ 0x45
   372  000046                     	ds	2
   373  000048                     vfpfcnvrt@fmt:
   374                           	opt callstack 0
   375                           
   376                           ; 2 bytes @ 0x47
   377  000048                     	ds	2
   378  00004A                     vfpfcnvrt@ap:
   379                           	opt callstack 0
   380                           
   381                           ; 2 bytes @ 0x49
   382  00004A                     	ds	2
   383  00004C                     ??_vfpfcnvrt:
   384                           
   385                           ; 1 bytes @ 0x4B
   386  00004C                     	ds	2
   387  00004E                     vfpfcnvrt@ll:
   388                           	opt callstack 0
   389                           
   390                           ; 8 bytes @ 0x4D
   391  00004E                     	ds	8
   392  000056                     ?_vfprintf:
   393                           	opt callstack 0
   394  000056                     vfprintf@fp:
   395                           	opt callstack 0
   396                           
   397                           ; 2 bytes @ 0x55
   398  000056                     	ds	2
   399  000058                     vfprintf@fmt:
   400                           	opt callstack 0
   401                           
   402                           ; 2 bytes @ 0x57
   403  000058                     	ds	2
   404  00005A                     vfprintf@ap:
   405                           	opt callstack 0
   406                           
   407                           ; 2 bytes @ 0x59
   408  00005A                     	ds	2
   409  00005C                     vfprintf@cfmt:
   410                           	opt callstack 0
   411                           
   412                           ; 2 bytes @ 0x5B
   413  00005C                     	ds	2
   414  00005E                     ??_main:
   415                           
   416                           ; 1 bytes @ 0x5D
   417  00005E                     	ds	1
   418                           
   419 ;;
   420 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   421 ;;
   422 ;; *************** function _main *****************
   423 ;; Defined at:
   424 ;;		line 26 in file "main.c"
   425 ;; Parameters:    Size  Location     Type
   426 ;;		None
   427 ;; Auto vars:     Size  Location     Type
   428 ;;		None
   429 ;; Return value:  Size  Location     Type
   430 ;;                  1    wreg      void 
   431 ;; Registers used:
   432 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   433 ;; Tracked objects:
   434 ;;		On entry : 0/0
   435 ;;		On exit  : 0/0
   436 ;;		Unchanged: 0/0
   437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   438 ;;      Params:         0       0       0       0       0       0       0       0       0
   439 ;;      Locals:         0       0       0       0       0       0       0       0       0
   440 ;;      Temps:          1       0       0       0       0       0       0       0       0
   441 ;;      Totals:         1       0       0       0       0       0       0       0       0
   442 ;;Total ram usage:        1 bytes
   443 ;; Hardware stack levels required when called:   12
   444 ;; This function calls:
   445 ;;		_caracter_inicio
   446 ;;		_inicializa_lcd
   447 ;;		_printf
   448 ;; This function is called by:
   449 ;;		Startup code after reset
   450 ;; This function uses a non-reentrant model
   451 ;;
   452                           
   453                           	psect	text0
   454  001202                     __ptext0:
   455                           	opt callstack 0
   456  001202                     _main:
   457                           	opt callstack 19
   458  001202                     
   459                           ;main.c: 27:     TRISBbits.RB0 = 1;
   460  001202  8093               	bsf	147,0,c	;volatile
   461                           
   462                           ;main.c: 28:     INTEDG0 = 1;
   463  001204  8CF1               	bsf	4081,6,c	;volatile
   464  001206                     
   465                           ;main.c: 29:     TRISD = 0x00;
   466  001206  0E00               	movlw	0
   467  001208  6E95               	movwf	149,c	;volatile
   468  00120A                     
   469                           ;main.c: 30:     inicializa_lcd();
   470  00120A  ECC0  F008         	call	_inicializa_lcd	;wreg free
   471  00120E                     
   472                           ;main.c: 31:     T2CONbits.T2CKPS = 0b00;
   473  00120E  0EFC               	movlw	-4
   474  001210  16CA               	andwf	202,f,c	;volatile
   475  001212                     
   476                           ;main.c: 32:     T2CONbits.TOUTPS = 0b0011;
   477  001212  50CA               	movf	202,w,c	;volatile
   478  001214  0B87               	andlw	-121
   479  001216  0918               	iorlw	24
   480  001218  6ECA               	movwf	202,c	;volatile
   481  00121A                     
   482                           ;main.c: 33:     T2CONbits.TMR2ON = 1;
   483  00121A  84CA               	bsf	202,2,c	;volatile
   484  00121C                     
   485                           ;main.c: 34:     INTCONbits.GIE = 1;
   486  00121C  8EF2               	bsf	242,7,c	;volatile
   487  00121E                     
   488                           ;main.c: 35:     INTCONbits.INT0IE = 1;
   489  00121E  88F2               	bsf	242,4,c	;volatile
   490  001220                     
   491                           ;main.c: 36:     INTCONbits.GIEH = 1;
   492  001220  8EF2               	bsf	242,7,c	;volatile
   493  001222                     l1543:
   494                           
   495                           ;main.c: 39:         _delay((unsigned long)((10)*(4000000/4000.0)));
   496  001222  0E0D               	movlw	13
   497  001224  6E5E               	movwf	??_main^0,c
   498  001226  0EFC               	movlw	252
   499  001228                     u997:
   500  001228  2EE8               	decfsz	wreg,f,c
   501  00122A  D7FE               	bra	u997
   502  00122C  2E5E               	decfsz	??_main^0,f,c
   503  00122E  D7FC               	bra	u997
   504  001230                     
   505                           ;main.c: 40:         caracter_inicio(1,1);
   506  001230  0E01               	movlw	1
   507  001232  6E05               	movwf	caracter_inicio@coluna^0,c
   508  001234  0E01               	movlw	1
   509  001236  EC90  F009         	call	_caracter_inicio
   510  00123A                     
   511                           ;main.c: 41:         printf("TMR2 = %d",cont);
   512  00123A  0E0F               	movlw	low STR_1
   513  00123C  0100               	movlb	0	; () banked
   514  00123E  6F89               	movwf	printf@fmt& (0+255),b
   515  001240  0E08               	movlw	high STR_1
   516  001242  6F8A               	movwf	(printf@fmt+1)& (0+255),b
   517  001244  C068  F08B         	movff	_cont,?_printf+2
   518  001248  6B8C               	clrf	(?_printf+3)& (0+255),b
   519  00124A  EC06  F00A         	call	_printf	;wreg free
   520  00124E                     
   521                           ;main.c: 42:         caracter_inicio(2,1);
   522  00124E  0E01               	movlw	1
   523  001250  6E05               	movwf	caracter_inicio@coluna^0,c
   524  001252  0E02               	movlw	2
   525  001254  EC90  F009         	call	_caracter_inicio
   526  001258                     
   527                           ;main.c: 43:         printf("Largura+ = %d",2*cont);
   528  001258  0E01               	movlw	low STR_2
   529  00125A  0100               	movlb	0	; () banked
   530  00125C  6F89               	movwf	printf@fmt& (0+255),b
   531  00125E  0E08               	movlw	high STR_2
   532  001260  6F8A               	movwf	(printf@fmt+1)& (0+255),b
   533  001262  5168               	movf	_cont& (0+255),w,b
   534  001264  0D02               	mullw	2
   535  001266  CFF3 F08B          	movff	prodl,?_printf+2
   536  00126A  CFF4 F08C          	movff	prodh,?_printf+3
   537  00126E  EC06  F00A         	call	_printf	;wreg free
   538  001272  EF11  F009         	goto	l1543
   539  001276  EF07  F000         	goto	start
   540  00127A                     __end_of_main:
   541                           	opt callstack 0
   542                           
   543 ;; *************** function _printf *****************
   544 ;; Defined at:
   545 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\printf.c"
   546 ;; Parameters:    Size  Location     Type
   547 ;;  fmt             2    0[BANK0 ] PTR const unsigned char 
   548 ;;		 -> STR_2(14), STR_1(10), 
   549 ;; Auto vars:     Size  Location     Type
   550 ;;  ap              2    6[BANK0 ] PTR void [1]
   551 ;;		 -> ?_printf(2), 
   552 ;;  ret             2    0        int 
   553 ;; Return value:  Size  Location     Type
   554 ;;                  2    0[BANK0 ] int 
   555 ;; Registers used:
   556 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   557 ;; Tracked objects:
   558 ;;		On entry : 0/0
   559 ;;		On exit  : 0/0
   560 ;;		Unchanged: 0/0
   561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   562 ;;      Params:         0       4       0       0       0       0       0       0       0
   563 ;;      Locals:         0       4       0       0       0       0       0       0       0
   564 ;;      Temps:          0       0       0       0       0       0       0       0       0
   565 ;;      Totals:         0       8       0       0       0       0       0       0       0
   566 ;;Total ram usage:        8 bytes
   567 ;; Hardware stack levels used:    1
   568 ;; Hardware stack levels required when called:   11
   569 ;; This function calls:
   570 ;;		_vfprintf
   571 ;; This function is called by:
   572 ;;		_main
   573 ;; This function uses a non-reentrant model
   574 ;;
   575                           
   576                           	psect	text1
   577  00140C                     __ptext1:
   578                           	opt callstack 0
   579  00140C                     _printf:
   580                           	opt callstack 19
   581  00140C  0E8B               	movlw	low (?_printf+2)
   582  00140E  0100               	movlb	0	; () banked
   583  001410  6F8F               	movwf	printf@ap& (0+255),b
   584  001412  0E00               	movlw	high (?_printf+2)
   585  001414  6F90               	movwf	(printf@ap+1)& (0+255),b
   586  001416                     
   587                           ; BSR set to: 0
   588  001416  0E00               	movlw	0
   589  001418  6E56               	movwf	vfprintf@fp^0,c
   590  00141A  0E00               	movlw	0
   591  00141C  6E57               	movwf	(vfprintf@fp+1)^0,c
   592  00141E  C089  F058         	movff	printf@fmt,vfprintf@fmt
   593  001422  C08A  F059         	movff	printf@fmt+1,vfprintf@fmt+1
   594  001426  0E8F               	movlw	low printf@ap
   595  001428  6E5A               	movwf	vfprintf@ap^0,c
   596  00142A  0E00               	movlw	high printf@ap
   597  00142C  6E5B               	movwf	(vfprintf@ap+1)^0,c
   598  00142E  EC3D  F009         	call	_vfprintf	;wreg free
   599  001432  0012               	return		;funcret
   600  001434                     __end_of_printf:
   601                           	opt callstack 0
   602                           
   603 ;; *************** function _vfprintf *****************
   604 ;; Defined at:
   605 ;;		line 1368 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c"
   606 ;; Parameters:    Size  Location     Type
   607 ;;  fp              2   85[COMRAM] PTR struct _IO_FILE
   608 ;;		 -> NULL(0), 
   609 ;;  fmt             2   87[COMRAM] PTR const unsigned char 
   610 ;;		 -> STR_2(14), STR_1(10), 
   611 ;;  ap              2   89[COMRAM] PTR PTR void 
   612 ;;		 -> printf@ap(2), 
   613 ;; Auto vars:     Size  Location     Type
   614 ;;  cfmt            2   91[COMRAM] PTR unsigned char 
   615 ;;		 -> STR_2(14), STR_1(10), 
   616 ;; Return value:  Size  Location     Type
   617 ;;                  2   85[COMRAM] int 
   618 ;; Registers used:
   619 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   620 ;; Tracked objects:
   621 ;;		On entry : 0/0
   622 ;;		On exit  : 0/0
   623 ;;		Unchanged: 0/0
   624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   625 ;;      Params:         6       0       0       0       0       0       0       0       0
   626 ;;      Locals:         2       0       0       0       0       0       0       0       0
   627 ;;      Temps:          0       0       0       0       0       0       0       0       0
   628 ;;      Totals:         8       0       0       0       0       0       0       0       0
   629 ;;Total ram usage:        8 bytes
   630 ;; Hardware stack levels used:    1
   631 ;; Hardware stack levels required when called:   10
   632 ;; This function calls:
   633 ;;		_vfpfcnvrt
   634 ;; This function is called by:
   635 ;;		_printf
   636 ;; This function uses a non-reentrant model
   637 ;;
   638                           
   639                           	psect	text2
   640  00127A                     __ptext2:
   641                           	opt callstack 0
   642  00127A                     _vfprintf:
   643                           	opt callstack 19
   644  00127A                     
   645                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1368: int v
      +                          fprintf(FILE *fp, const char *fmt, va_list ap);C:\Program Files (x86)\Microchip\xc8\v2.1
      +                          0\pic\sources\c99\common\doprnt.c: 1369: {;C:\Program Files (x86)\Microchip\xc8\v2.10\pi
      +                          c\sources\c99\common\doprnt.c: 1371:     char *cfmt;;C:\Program Files (x86)\Microchip\xc
      +                          8\v2.10\pic\sources\c99\common\doprnt.c: 1373:     cfmt = (char *)fmt;
   646  00127A  C058  F05C         	movff	vfprintf@fmt,vfprintf@cfmt
   647  00127E  C059  F05D         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
   648  001282                     
   649                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1374:     n
      +                          out = 0;
   650  001282  0E00               	movlw	0
   651  001284  0100               	movlb	0	; () banked
   652  001286  6F61               	movwf	(_nout+1)& (0+255),b
   653  001288  0E00               	movlw	0
   654  00128A  6F60               	movwf	_nout& (0+255),b
   655                           
   656                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
   657  00128C  EF5B  F009         	goto	l1481
   658  001290                     l1479:
   659                           
   660                           ; BSR set to: 0
   661                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1376:      
      +                             nout += vfpfcnvrt(fp, &cfmt, ap);
   662  001290  C056  F046         	movff	vfprintf@fp,vfpfcnvrt@fp
   663  001294  C057  F047         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
   664  001298  0E5C               	movlw	low vfprintf@cfmt
   665  00129A  6E48               	movwf	vfpfcnvrt@fmt^0,c
   666  00129C  0E00               	movlw	high vfprintf@cfmt
   667  00129E  6E49               	movwf	(vfpfcnvrt@fmt+1)^0,c
   668  0012A0  C05A  F04A         	movff	vfprintf@ap,vfpfcnvrt@ap
   669  0012A4  C05B  F04B         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
   670  0012A8  EC7E  F005         	call	_vfpfcnvrt	;wreg free
   671  0012AC  5046               	movf	?_vfpfcnvrt^0,w,c
   672  0012AE  0100               	movlb	0	; () banked
   673  0012B0  2760               	addwf	_nout& (0+255),f,b
   674  0012B2  5047               	movf	(?_vfpfcnvrt+1)^0,w,c
   675  0012B4  2361               	addwfc	(_nout+1)& (0+255),f,b
   676  0012B6                     l1481:
   677                           
   678                           ; BSR set to: 0
   679                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
   680  0012B6  C05C  FFF6         	movff	vfprintf@cfmt,tblptrl
   681  0012BA  C05D  FFF7         	movff	vfprintf@cfmt+1,tblptrh
   682  0012BE                     	if	0	;tblptru may be non-zero
   683  0012BE                     	endif
   684  0012BE                     	if	0	;tblptru may be non-zero
   685  0012BE                     	endif
   686  0012BE  0008               	tblrd		*
   687  0012C0  50F5               	movf	tablat,w,c
   688  0012C2  0900               	iorlw	0
   689  0012C4  A4D8               	btfss	status,2,c
   690  0012C6  EF67  F009         	goto	u941
   691  0012CA  EF69  F009         	goto	u940
   692  0012CE                     u941:
   693  0012CE  EF48  F009         	goto	l1479
   694  0012D2                     u940:
   695  0012D2                     
   696                           ; BSR set to: 0
   697                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1378:     r
      +                          eturn nout;
   698  0012D2  C060  F056         	movff	_nout,?_vfprintf
   699  0012D6  C061  F057         	movff	_nout+1,?_vfprintf+1
   700  0012DA                     
   701                           ; BSR set to: 0
   702  0012DA  0012               	return		;funcret
   703  0012DC                     __end_of_vfprintf:
   704                           	opt callstack 0
   705                           
   706 ;; *************** function _vfpfcnvrt *****************
   707 ;; Defined at:
   708 ;;		line 670 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c"
   709 ;; Parameters:    Size  Location     Type
   710 ;;  fp              2   69[COMRAM] PTR struct _IO_FILE
   711 ;;		 -> NULL(0), 
   712 ;;  fmt             2   71[COMRAM] PTR PTR unsigned char 
   713 ;;		 -> vfprintf@cfmt(2), 
   714 ;;  ap              2   73[COMRAM] PTR PTR void 
   715 ;;		 -> printf@ap(2), 
   716 ;; Auto vars:     Size  Location     Type
   717 ;;  ll              8   77[COMRAM] long long 
   718 ;;  llu             8    0        unsigned long long 
   719 ;;  f               4    0        unsigned long long 
   720 ;;  vp              3    0        PTR void 
   721 ;;  ct              3    0        unsigned char [3]
   722 ;;  cp              3    0        PTR unsigned char 
   723 ;;  i               2    0        int 
   724 ;;  done            2    0        int 
   725 ;;  c               1    0        unsigned char 
   726 ;; Return value:  Size  Location     Type
   727 ;;                  2   69[COMRAM] int 
   728 ;; Registers used:
   729 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   730 ;; Tracked objects:
   731 ;;		On entry : 0/0
   732 ;;		On exit  : 0/0
   733 ;;		Unchanged: 0/0
   734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   735 ;;      Params:         6       0       0       0       0       0       0       0       0
   736 ;;      Locals:         8       0       0       0       0       0       0       0       0
   737 ;;      Temps:          2       0       0       0       0       0       0       0       0
   738 ;;      Totals:        16       0       0       0       0       0       0       0       0
   739 ;;Total ram usage:       16 bytes
   740 ;; Hardware stack levels used:    1
   741 ;; Hardware stack levels required when called:    9
   742 ;; This function calls:
   743 ;;		_dtoa
   744 ;;		_fputc
   745 ;; This function is called by:
   746 ;;		_vfprintf
   747 ;; This function uses a non-reentrant model
   748 ;;
   749                           
   750                           	psect	text3
   751  000AFC                     __ptext3:
   752                           	opt callstack 0
   753  000AFC                     _vfpfcnvrt:
   754                           	opt callstack 19
   755  000AFC                     
   756                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 670: static
      +                           int vfpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files (x86)\Microchip\xc8\v
      +                          2.10\pic\sources\c99\common\doprnt.c: 671: {;C:\Program Files (x86)\Microchip\xc8\v2.10\
      +                          pic\sources\c99\common\doprnt.c: 672:     char c, *cp, ct[3];;C:\Program Files (x86)\Mic
      +                          rochip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 673:     int done, i;;C:\Program Files
      +                           (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 674:     long long ll;
   757  000AFC  C048  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   758  000B00  C049  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   759  000B04  CFDE FFF6          	movff	postinc2,tblptrl
   760  000B08  CFDD FFF7          	movff	postdec2,tblptrh
   761  000B0C                     	if	0	;tblptru may be non-zero
   762  000B0C                     	endif
   763  000B0C                     	if	0	;tblptru may be non-zero
   764  000B0C                     	endif
   765  000B0C  0008               	tblrd		*
   766  000B0E  50F5               	movf	tablat,w,c
   767  000B10  0A25               	xorlw	37
   768  000B12  A4D8               	btfss	status,2,c
   769  000B14  EF8E  F005         	goto	u901
   770  000B18  EF90  F005         	goto	u900
   771  000B1C                     u901:
   772  000B1C  EF3C  F006         	goto	l1467
   773  000B20                     u900:
   774  000B20                     
   775                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 681:       
      +                            ++*fmt;
   776  000B20  C048  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   777  000B24  C049  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   778  000B28  2ADE               	incf	postinc2,f,c
   779  000B2A  0E00               	movlw	0
   780  000B2C  22DD               	addwfc	postdec2,f,c
   781  000B2E                     
   782                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 683:       
      +                            flags = width = 0;
   783  000B2E  0E00               	movlw	0
   784  000B30  0100               	movlb	0	; () banked
   785  000B32  6F63               	movwf	(_width+1)& (0+255),b
   786  000B34  0E00               	movlw	0
   787  000B36  6F62               	movwf	_width& (0+255),b
   788  000B38  C062  F066         	movff	_width,_flags
   789  000B3C  C063  F067         	movff	_width+1,_flags+1
   790  000B40                     
   791                           ; BSR set to: 0
   792                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 684:       
      +                            prec = -1;
   793  000B40  6964               	setf	_prec& (0+255),b
   794  000B42  6965               	setf	(_prec+1)& (0+255),b
   795  000B44                     
   796                           ; BSR set to: 0
   797                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 825:       
      +                            if ((*fmt[0] == 'd') || (*fmt[0] == 'i')) {
   798  000B44  C048  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   799  000B48  C049  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   800  000B4C  CFDE FFF6          	movff	postinc2,tblptrl
   801  000B50  CFDD FFF7          	movff	postdec2,tblptrh
   802  000B54                     	if	0	;tblptru may be non-zero
   803  000B54                     	endif
   804  000B54                     	if	0	;tblptru may be non-zero
   805  000B54                     	endif
   806  000B54  0008               	tblrd		*
   807  000B56  50F5               	movf	tablat,w,c
   808  000B58  0A64               	xorlw	100
   809  000B5A  B4D8               	btfsc	status,2,c
   810  000B5C  EFB2  F005         	goto	u911
   811  000B60  EFB4  F005         	goto	u910
   812  000B64                     u911:
   813  000B64  EFC6  F005         	goto	l1445
   814  000B68                     u910:
   815  000B68                     
   816                           ; BSR set to: 0
   817  000B68  C048  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   818  000B6C  C049  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   819  000B70  CFDE FFF6          	movff	postinc2,tblptrl
   820  000B74  CFDD FFF7          	movff	postdec2,tblptrh
   821  000B78                     	if	0	;tblptru may be non-zero
   822  000B78                     	endif
   823  000B78                     	if	0	;tblptru may be non-zero
   824  000B78                     	endif
   825  000B78  0008               	tblrd		*
   826  000B7A  50F5               	movf	tablat,w,c
   827  000B7C  0A69               	xorlw	105
   828  000B7E  A4D8               	btfss	status,2,c
   829  000B80  EFC4  F005         	goto	u921
   830  000B84  EFC6  F005         	goto	u920
   831  000B88                     u921:
   832  000B88  EF06  F006         	goto	l1451
   833  000B8C                     u920:
   834  000B8C                     l1445:
   835                           
   836                           ; BSR set to: 0
   837                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 827:       
      +                                ++*fmt;
   838  000B8C  C048  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   839  000B90  C049  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   840  000B94  2ADE               	incf	postinc2,f,c
   841  000B96  0E00               	movlw	0
   842  000B98  22DD               	addwfc	postdec2,f,c
   843                           
   844                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 828:       
      +                                ll = (long long)(*(int *)__va_arg(*(int **)ap, (int)0));
   845  000B9A  C04A  FFD9         	movff	vfpfcnvrt@ap,fsr2l
   846  000B9E  C04B  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
   847  000BA2  CFDF F04C          	movff	indf2,??_vfpfcnvrt
   848  000BA6  0E02               	movlw	2
   849  000BA8  26DE               	addwf	postinc2,f,c
   850  000BAA  CFDF F04D          	movff	indf2,??_vfpfcnvrt+1
   851  000BAE  0E00               	movlw	0
   852  000BB0  22DD               	addwfc	postdec2,f,c
   853  000BB2  C04C  FFD9         	movff	??_vfpfcnvrt,fsr2l
   854  000BB6  C04D  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
   855  000BBA  CFDE F04E          	movff	postinc2,vfpfcnvrt@ll
   856  000BBE  CFDD F04F          	movff	postdec2,vfpfcnvrt@ll+1
   857  000BC2  0E00               	movlw	0
   858  000BC4  BE4F               	btfsc	(vfpfcnvrt@ll+1)^0,7,c
   859  000BC6  0EFF               	movlw	-1
   860  000BC8  6E50               	movwf	(vfpfcnvrt@ll+2)^0,c
   861  000BCA  6E51               	movwf	(vfpfcnvrt@ll+3)^0,c
   862  000BCC  6E52               	movwf	(vfpfcnvrt@ll+4)^0,c
   863  000BCE  6E53               	movwf	(vfpfcnvrt@ll+5)^0,c
   864  000BD0  6E54               	movwf	(vfpfcnvrt@ll+6)^0,c
   865  000BD2  6E55               	movwf	(vfpfcnvrt@ll+7)^0,c
   866  000BD4                     
   867                           ; BSR set to: 0
   868                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 830:       
      +                                return dtoa(fp, ll);
   869  000BD4  C046  F022         	movff	vfpfcnvrt@fp,dtoa@fp
   870  000BD8  C047  F023         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
   871  000BDC  C04E  F024         	movff	vfpfcnvrt@ll,dtoa@d
   872  000BE0  C04F  F025         	movff	vfpfcnvrt@ll+1,dtoa@d+1
   873  000BE4  C050  F026         	movff	vfpfcnvrt@ll+2,dtoa@d+2
   874  000BE8  C051  F027         	movff	vfpfcnvrt@ll+3,dtoa@d+3
   875  000BEC  C052  F028         	movff	vfpfcnvrt@ll+4,dtoa@d+4
   876  000BF0  C053  F029         	movff	vfpfcnvrt@ll+5,dtoa@d+5
   877  000BF4  C054  F02A         	movff	vfpfcnvrt@ll+6,dtoa@d+6
   878  000BF8  C055  F02B         	movff	vfpfcnvrt@ll+7,dtoa@d+7
   879  000BFC  EC0D  F004         	call	_dtoa	;wreg free
   880  000C00  C022  F046         	movff	?_dtoa,?_vfpfcnvrt
   881  000C04  C023  F047         	movff	?_dtoa+1,?_vfpfcnvrt+1
   882  000C08  EF57  F006         	goto	l134
   883  000C0C                     l1451:
   884                           
   885                           ; BSR set to: 0
   886                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1350:      
      +                             if ((*fmt)[0] == '%') {
   887  000C0C  C048  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   888  000C10  C049  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   889  000C14  CFDE FFF6          	movff	postinc2,tblptrl
   890  000C18  CFDD FFF7          	movff	postdec2,tblptrh
   891  000C1C                     	if	0	;tblptru may be non-zero
   892  000C1C                     	endif
   893  000C1C                     	if	0	;tblptru may be non-zero
   894  000C1C                     	endif
   895  000C1C  0008               	tblrd		*
   896  000C1E  50F5               	movf	tablat,w,c
   897  000C20  0A25               	xorlw	37
   898  000C22  A4D8               	btfss	status,2,c
   899  000C24  EF16  F006         	goto	u931
   900  000C28  EF18  F006         	goto	u930
   901  000C2C                     u931:
   902  000C2C  EF2F  F006         	goto	l1461
   903  000C30                     u930:
   904  000C30                     
   905                           ; BSR set to: 0
   906                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1351:      
      +                                 ++*fmt;
   907  000C30  C048  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   908  000C34  C049  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   909  000C38  2ADE               	incf	postinc2,f,c
   910  000C3A  0E00               	movlw	0
   911  000C3C  22DD               	addwfc	postdec2,f,c
   912  000C3E                     
   913                           ; BSR set to: 0
   914                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1352:      
      +                                 fputc((int)'%', fp);
   915  000C3E  0E00               	movlw	0
   916  000C40  6E08               	movwf	(fputc@c+1)^0,c
   917  000C42  0E25               	movlw	37
   918  000C44  6E07               	movwf	fputc@c^0,c
   919  000C46  C046  F009         	movff	vfpfcnvrt@fp,fputc@fp
   920  000C4A  C047  F00A         	movff	vfpfcnvrt@fp+1,fputc@fp+1
   921  000C4E  EC31  F008         	call	_fputc	;wreg free
   922  000C52                     l1457:
   923                           
   924                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1353:      
      +                                 return 1;
   925  000C52  0E00               	movlw	0
   926  000C54  6E47               	movwf	(?_vfpfcnvrt+1)^0,c
   927  000C56  0E01               	movlw	1
   928  000C58  6E46               	movwf	?_vfpfcnvrt^0,c
   929  000C5A  EF57  F006         	goto	l134
   930  000C5E                     l1461:
   931                           
   932                           ; BSR set to: 0
   933                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1357:      
      +                             ++*fmt;
   934  000C5E  C048  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   935  000C62  C049  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   936  000C66  2ADE               	incf	postinc2,f,c
   937  000C68  0E00               	movlw	0
   938  000C6A  22DD               	addwfc	postdec2,f,c
   939  000C6C                     
   940                           ; BSR set to: 0
   941                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1358:      
      +                             return 0;
   942  000C6C  0E00               	movlw	0
   943  000C6E  6E47               	movwf	(?_vfpfcnvrt+1)^0,c
   944  000C70  0E00               	movlw	0
   945  000C72  6E46               	movwf	?_vfpfcnvrt^0,c
   946  000C74  EF57  F006         	goto	l134
   947  000C78                     l1467:
   948                           
   949                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1362:     f
      +                          putc((int)(*fmt)[0], fp);
   950  000C78  C048  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   951  000C7C  C049  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   952  000C80  CFDE FFF6          	movff	postinc2,tblptrl
   953  000C84  CFDD FFF7          	movff	postdec2,tblptrh
   954  000C88                     	if	0	;tblptru may be non-zero
   955  000C88                     	endif
   956  000C88                     	if	0	;tblptru may be non-zero
   957  000C88                     	endif
   958  000C88  0008               	tblrd		*
   959  000C8A  50F5               	movf	tablat,w,c
   960  000C8C  6E07               	movwf	fputc@c^0,c
   961  000C8E  6A08               	clrf	(fputc@c+1)^0,c
   962  000C90  C046  F009         	movff	vfpfcnvrt@fp,fputc@fp
   963  000C94  C047  F00A         	movff	vfpfcnvrt@fp+1,fputc@fp+1
   964  000C98  EC31  F008         	call	_fputc	;wreg free
   965  000C9C                     
   966                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1363:     +
      +                          +*fmt;
   967  000C9C  C048  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   968  000CA0  C049  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   969  000CA4  2ADE               	incf	postinc2,f,c
   970  000CA6  0E00               	movlw	0
   971  000CA8  22DD               	addwfc	postdec2,f,c
   972  000CAA  EF29  F006         	goto	l1457
   973  000CAE                     l134:
   974  000CAE  0012               	return		;funcret
   975  000CB0                     __end_of_vfpfcnvrt:
   976                           	opt callstack 0
   977                           
   978 ;; *************** function _dtoa *****************
   979 ;; Defined at:
   980 ;;		line 274 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c"
   981 ;; Parameters:    Size  Location     Type
   982 ;;  fp              2   33[COMRAM] PTR struct _IO_FILE
   983 ;;		 -> NULL(0), 
   984 ;;  d               8   35[COMRAM] long long 
   985 ;; Auto vars:     Size  Location     Type
   986 ;;  n               8   59[COMRAM] long long 
   987 ;;  i               2   67[COMRAM] int 
   988 ;;  s               2   57[COMRAM] int 
   989 ;;  w               2   55[COMRAM] int 
   990 ;;  p               2   53[COMRAM] int 
   991 ;; Return value:  Size  Location     Type
   992 ;;                  2   33[COMRAM] int 
   993 ;; Registers used:
   994 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
   995 ;; Tracked objects:
   996 ;;		On entry : 0/0
   997 ;;		On exit  : 0/0
   998 ;;		Unchanged: 0/0
   999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1000 ;;      Params:        10       0       0       0       0       0       0       0       0
  1001 ;;      Locals:        18       0       0       0       0       0       0       0       0
  1002 ;;      Temps:          8       0       0       0       0       0       0       0       0
  1003 ;;      Totals:        36       0       0       0       0       0       0       0       0
  1004 ;;Total ram usage:       36 bytes
  1005 ;; Hardware stack levels used:    1
  1006 ;; Hardware stack levels required when called:    8
  1007 ;; This function calls:
  1008 ;;		___aodiv
  1009 ;;		___aomod
  1010 ;;		_abs
  1011 ;;		_pad
  1012 ;; This function is called by:
  1013 ;;		_vfpfcnvrt
  1014 ;; This function uses a non-reentrant model
  1015 ;;
  1016                           
  1017                           	psect	text4
  1018  00081A                     __ptext4:
  1019                           	opt callstack 0
  1020  00081A                     _dtoa:
  1021                           	opt callstack 19
  1022  00081A                     
  1023                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 274: static
      +                           int dtoa(FILE *fp, long long d);C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\
      +                          c99\common\doprnt.c: 275: {;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\c
      +                          ommon\doprnt.c: 276:     int i, p, s, w;;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\
      +                          sources\c99\common\doprnt.c: 277:     long long n;;C:\Program Files (x86)\Microchip\xc8\
      +                          v2.10\pic\sources\c99\common\doprnt.c: 280:     n = d;
  1024  00081A  C024  F03C         	movff	dtoa@d,dtoa@n
  1025  00081E  C025  F03D         	movff	dtoa@d+1,dtoa@n+1
  1026  000822  C026  F03E         	movff	dtoa@d+2,dtoa@n+2
  1027  000826  C027  F03F         	movff	dtoa@d+3,dtoa@n+3
  1028  00082A  C028  F040         	movff	dtoa@d+4,dtoa@n+4
  1029  00082E  C029  F041         	movff	dtoa@d+5,dtoa@n+5
  1030  000832  C02A  F042         	movff	dtoa@d+6,dtoa@n+6
  1031  000836  C02B  F043         	movff	dtoa@d+7,dtoa@n+7
  1032  00083A                     
  1033                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 281:     s 
      +                          = n < 0 ? 1 : 0;
  1034  00083A  BE43               	btfsc	(dtoa@n+7)^0,7,c
  1035  00083C  EF22  F004         	goto	u751
  1036  000840  EF25  F004         	goto	u750
  1037  000844                     u751:
  1038  000844  0E01               	movlw	1
  1039  000846  EF26  F004         	goto	u760
  1040  00084A                     u750:
  1041  00084A  0E00               	movlw	0
  1042  00084C                     u760:
  1043  00084C  6E3A               	movwf	dtoa@s^0,c
  1044  00084E  6A3B               	clrf	(dtoa@s+1)^0,c
  1045                           
  1046                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 282:     if
      +                           (s) {
  1047  000850  503A               	movf	dtoa@s^0,w,c
  1048  000852  103B               	iorwf	(dtoa@s+1)^0,w,c
  1049  000854  B4D8               	btfsc	status,2,c
  1050  000856  EF2F  F004         	goto	u771
  1051  00085A  EF31  F004         	goto	u770
  1052  00085E                     u771:
  1053  00085E  EF41  F004         	goto	l1377
  1054  000862                     u770:
  1055  000862                     
  1056                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 283:       
      +                            n = -n;
  1057  000862  1E43               	comf	(dtoa@n+7)^0,f,c
  1058  000864  1E42               	comf	(dtoa@n+6)^0,f,c
  1059  000866  1E41               	comf	(dtoa@n+5)^0,f,c
  1060  000868  1E40               	comf	(dtoa@n+4)^0,f,c
  1061  00086A  1E3F               	comf	(dtoa@n+3)^0,f,c
  1062  00086C  1E3E               	comf	(dtoa@n+2)^0,f,c
  1063  00086E  1E3D               	comf	(dtoa@n+1)^0,f,c
  1064  000870  6C3C               	negf	dtoa@n^0,c
  1065  000872  0E00               	movlw	0
  1066  000874  223D               	addwfc	(dtoa@n+1)^0,f,c
  1067  000876  223E               	addwfc	(dtoa@n+2)^0,f,c
  1068  000878  223F               	addwfc	(dtoa@n+3)^0,f,c
  1069  00087A  2240               	addwfc	(dtoa@n+4)^0,f,c
  1070  00087C  2241               	addwfc	(dtoa@n+5)^0,f,c
  1071  00087E  2242               	addwfc	(dtoa@n+6)^0,f,c
  1072  000880  2243               	addwfc	(dtoa@n+7)^0,f,c
  1073  000882                     l1377:
  1074                           
  1075                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 287:     if
      +                           (!(prec < 0)) {
  1076  000882  0100               	movlb	0	; () banked
  1077  000884  BF65               	btfsc	(_prec+1)& (0+255),7,b
  1078  000886  EF47  F004         	goto	u781
  1079  00088A  EF49  F004         	goto	u780
  1080  00088E                     u781:
  1081  00088E  EF4A  F004         	goto	l1381
  1082  000892                     u780:
  1083  000892                     
  1084                           ; BSR set to: 0
  1085                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 288:       
      +                            flags &= ~(1 << 1);
  1086  000892  9366               	bcf	_flags& (0+255),1,b
  1087  000894                     l1381:
  1088                           
  1089                           ; BSR set to: 0
  1090                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 290:     p 
      +                          = (0 < prec) ? prec : 1;
  1091  000894  BF65               	btfsc	(_prec+1)& (0+255),7,b
  1092  000896  EF57  F004         	goto	u790
  1093  00089A  5165               	movf	(_prec+1)& (0+255),w,b
  1094  00089C  E106               	bnz	u791
  1095  00089E  0564               	decf	_prec& (0+255),w,b
  1096  0008A0  B0D8               	btfsc	status,0,c
  1097  0008A2  EF55  F004         	goto	u791
  1098  0008A6  EF57  F004         	goto	u790
  1099  0008AA                     u791:
  1100  0008AA  EF5D  F004         	goto	l107
  1101  0008AE                     u790:
  1102  0008AE                     
  1103                           ; BSR set to: 0
  1104  0008AE  0E00               	movlw	0
  1105  0008B0  6E37               	movwf	(dtoa@p+1)^0,c
  1106  0008B2  0E01               	movlw	1
  1107  0008B4  6E36               	movwf	dtoa@p^0,c
  1108  0008B6  EF61  F004         	goto	l109
  1109  0008BA                     l107:
  1110                           
  1111                           ; BSR set to: 0
  1112  0008BA  C064  F036         	movff	_prec,dtoa@p
  1113  0008BE  C065  F037         	movff	_prec+1,dtoa@p+1
  1114  0008C2                     l109:
  1115                           
  1116                           ; BSR set to: 0
  1117                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 291:     w 
      +                          = width;
  1118  0008C2  C062  F038         	movff	_width,dtoa@w
  1119  0008C6  C063  F039         	movff	_width+1,dtoa@w+1
  1120  0008CA                     
  1121                           ; BSR set to: 0
  1122                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 292:     if
      +                           (s || (flags & (1 << 2))) {
  1123  0008CA  503A               	movf	dtoa@s^0,w,c
  1124  0008CC  103B               	iorwf	(dtoa@s+1)^0,w,c
  1125  0008CE  A4D8               	btfss	status,2,c
  1126  0008D0  EF6C  F004         	goto	u801
  1127  0008D4  EF6E  F004         	goto	u800
  1128  0008D8                     u801:
  1129  0008D8  EF75  F004         	goto	l1389
  1130  0008DC                     u800:
  1131  0008DC                     
  1132                           ; BSR set to: 0
  1133  0008DC  A566               	btfss	_flags& (0+255),2,b
  1134  0008DE  EF73  F004         	goto	u811
  1135  0008E2  EF75  F004         	goto	u810
  1136  0008E6                     u811:
  1137  0008E6  EF78  F004         	goto	l1391
  1138  0008EA                     u810:
  1139  0008EA                     l1389:
  1140                           
  1141                           ; BSR set to: 0
  1142                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 293:       
      +                            --w;
  1143  0008EA  0638               	decf	dtoa@w^0,f,c
  1144  0008EC  A0D8               	btfss	status,0,c
  1145  0008EE  0639               	decf	(dtoa@w+1)^0,f,c
  1146  0008F0                     l1391:
  1147                           
  1148                           ; BSR set to: 0
  1149                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 297:     i 
      +                          = sizeof(dbuf) - 1;
  1150  0008F0  0E00               	movlw	0
  1151  0008F2  6E45               	movwf	(dtoa@i+1)^0,c
  1152  0008F4  0E1F               	movlw	31
  1153  0008F6  6E44               	movwf	dtoa@i^0,c
  1154  0008F8                     
  1155                           ; BSR set to: 0
  1156                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 298:     db
      +                          uf[i] = '\0';
  1157  0008F8  0E00               	movlw	0
  1158  0008FA  6F88               	movwf	(_dbuf+31)& (0+255),b
  1159                           
  1160                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 299:     wh
      +                          ile (!(i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1161  0008FC  EFFC  F004         	goto	l1405
  1162  000900                     l1395:
  1163                           
  1164                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 300:       
      +                            --i;
  1165  000900  0644               	decf	dtoa@i^0,f,c
  1166  000902  A0D8               	btfss	status,0,c
  1167  000904  0645               	decf	(dtoa@i+1)^0,f,c
  1168  000906                     
  1169                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 301:       
      +                            dbuf[i] = '0' + abs(n % 10);
  1170  000906  0E69               	movlw	low _dbuf
  1171  000908  2444               	addwf	dtoa@i^0,w,c
  1172  00090A  6ED9               	movwf	fsr2l,c
  1173  00090C  0E00               	movlw	high _dbuf
  1174  00090E  2045               	addwfc	(dtoa@i+1)^0,w,c
  1175  000910  6EDA               	movwf	fsr2h,c
  1176  000912  C03C  F001         	movff	dtoa@n,___aomod@dividend
  1177  000916  C03D  F002         	movff	dtoa@n+1,___aomod@dividend+1
  1178  00091A  C03E  F003         	movff	dtoa@n+2,___aomod@dividend+2
  1179  00091E  C03F  F004         	movff	dtoa@n+3,___aomod@dividend+3
  1180  000922  C040  F005         	movff	dtoa@n+4,___aomod@dividend+4
  1181  000926  C041  F006         	movff	dtoa@n+5,___aomod@dividend+5
  1182  00092A  C042  F007         	movff	dtoa@n+6,___aomod@dividend+6
  1183  00092E  C043  F008         	movff	dtoa@n+7,___aomod@dividend+7
  1184  000932  0E0A               	movlw	10
  1185  000934  6E09               	movwf	___aomod@divisor^0,c
  1186  000936  0E00               	movlw	0
  1187  000938  6E0A               	movwf	(___aomod@divisor+1)^0,c
  1188  00093A  0E00               	movlw	0
  1189  00093C  6E0B               	movwf	(___aomod@divisor+2)^0,c
  1190  00093E  0E00               	movlw	0
  1191  000940  6E0C               	movwf	(___aomod@divisor+3)^0,c
  1192  000942  0E00               	movlw	0
  1193  000944  6E0D               	movwf	(___aomod@divisor+4)^0,c
  1194  000946  0E00               	movlw	0
  1195  000948  6E0E               	movwf	(___aomod@divisor+5)^0,c
  1196  00094A  0E00               	movlw	0
  1197  00094C  6E0F               	movwf	(___aomod@divisor+6)^0,c
  1198  00094E  0E00               	movlw	0
  1199  000950  6E10               	movwf	(___aomod@divisor+7)^0,c
  1200  000952  EC1C  F007         	call	___aomod	;wreg free
  1201  000956  C001  F02C         	movff	?___aomod,??_dtoa
  1202  00095A  C002  F02D         	movff	?___aomod+1,??_dtoa+1
  1203  00095E  C003  F02E         	movff	?___aomod+2,??_dtoa+2
  1204  000962  C004  F02F         	movff	?___aomod+3,??_dtoa+3
  1205  000966  C005  F030         	movff	?___aomod+4,??_dtoa+4
  1206  00096A  C006  F031         	movff	?___aomod+5,??_dtoa+5
  1207  00096E  C007  F032         	movff	?___aomod+6,??_dtoa+6
  1208  000972  C008  F033         	movff	?___aomod+7,??_dtoa+7
  1209  000976  C02C  F013         	movff	??_dtoa,abs@a
  1210  00097A  C02E  F014         	movff	??_dtoa+2,abs@a+1
  1211  00097E  ECB1  F009         	call	_abs	;wreg free
  1212  000982  5013               	movf	?_abs^0,w,c
  1213  000984  0F30               	addlw	48
  1214  000986  6EDF               	movwf	indf2,c
  1215  000988                     
  1216                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 302:       
      +                            --p;
  1217  000988  0636               	decf	dtoa@p^0,f,c
  1218  00098A  A0D8               	btfss	status,0,c
  1219  00098C  0637               	decf	(dtoa@p+1)^0,f,c
  1220  00098E                     
  1221                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 303:       
      +                            --w;
  1222  00098E  0638               	decf	dtoa@w^0,f,c
  1223  000990  A0D8               	btfss	status,0,c
  1224  000992  0639               	decf	(dtoa@w+1)^0,f,c
  1225  000994                     
  1226                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 304:       
      +                            n = n / 10;
  1227  000994  C03C  F001         	movff	dtoa@n,___aodiv@dividend
  1228  000998  C03D  F002         	movff	dtoa@n+1,___aodiv@dividend+1
  1229  00099C  C03E  F003         	movff	dtoa@n+2,___aodiv@dividend+2
  1230  0009A0  C03F  F004         	movff	dtoa@n+3,___aodiv@dividend+3
  1231  0009A4  C040  F005         	movff	dtoa@n+4,___aodiv@dividend+4
  1232  0009A8  C041  F006         	movff	dtoa@n+5,___aodiv@dividend+5
  1233  0009AC  C042  F007         	movff	dtoa@n+6,___aodiv@dividend+6
  1234  0009B0  C043  F008         	movff	dtoa@n+7,___aodiv@dividend+7
  1235  0009B4  0E0A               	movlw	10
  1236  0009B6  6E09               	movwf	___aodiv@divisor^0,c
  1237  0009B8  0E00               	movlw	0
  1238  0009BA  6E0A               	movwf	(___aodiv@divisor+1)^0,c
  1239  0009BC  0E00               	movlw	0
  1240  0009BE  6E0B               	movwf	(___aodiv@divisor+2)^0,c
  1241  0009C0  0E00               	movlw	0
  1242  0009C2  6E0C               	movwf	(___aodiv@divisor+3)^0,c
  1243  0009C4  0E00               	movlw	0
  1244  0009C6  6E0D               	movwf	(___aodiv@divisor+4)^0,c
  1245  0009C8  0E00               	movlw	0
  1246  0009CA  6E0E               	movwf	(___aodiv@divisor+5)^0,c
  1247  0009CC  0E00               	movlw	0
  1248  0009CE  6E0F               	movwf	(___aodiv@divisor+6)^0,c
  1249  0009D0  0E00               	movlw	0
  1250  0009D2  6E10               	movwf	(___aodiv@divisor+7)^0,c
  1251  0009D4  EC58  F006         	call	___aodiv	;wreg free
  1252  0009D8  C001  F03C         	movff	?___aodiv,dtoa@n
  1253  0009DC  C002  F03D         	movff	?___aodiv+1,dtoa@n+1
  1254  0009E0  C003  F03E         	movff	?___aodiv+2,dtoa@n+2
  1255  0009E4  C004  F03F         	movff	?___aodiv+3,dtoa@n+3
  1256  0009E8  C005  F040         	movff	?___aodiv+4,dtoa@n+4
  1257  0009EC  C006  F041         	movff	?___aodiv+5,dtoa@n+5
  1258  0009F0  C007  F042         	movff	?___aodiv+6,dtoa@n+6
  1259  0009F4  C008  F043         	movff	?___aodiv+7,dtoa@n+7
  1260  0009F8                     l1405:
  1261                           
  1262                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 299:     wh
      +                          ile (!(i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1263  0009F8  BE45               	btfsc	(dtoa@i+1)^0,7,c
  1264  0009FA  EF07  F005         	goto	u821
  1265  0009FE  5045               	movf	(dtoa@i+1)^0,w,c
  1266  000A00  E108               	bnz	u820
  1267  000A02  0444               	decf	dtoa@i^0,w,c
  1268  000A04  A0D8               	btfss	status,0,c
  1269  000A06  EF07  F005         	goto	u821
  1270  000A0A  EF09  F005         	goto	u820
  1271  000A0E                     u821:
  1272  000A0E  EF3A  F005         	goto	l1415
  1273  000A12                     u820:
  1274  000A12  503C               	movf	dtoa@n^0,w,c
  1275  000A14  103D               	iorwf	(dtoa@n+1)^0,w,c
  1276  000A16  103E               	iorwf	(dtoa@n+2)^0,w,c
  1277  000A18  103F               	iorwf	(dtoa@n+3)^0,w,c
  1278  000A1A  1040               	iorwf	(dtoa@n+4)^0,w,c
  1279  000A1C  1041               	iorwf	(dtoa@n+5)^0,w,c
  1280  000A1E  1042               	iorwf	(dtoa@n+6)^0,w,c
  1281  000A20  1043               	iorwf	(dtoa@n+7)^0,w,c
  1282  000A22  A4D8               	btfss	status,2,c
  1283  000A24  EF16  F005         	goto	u831
  1284  000A28  EF18  F005         	goto	u830
  1285  000A2C                     u831:
  1286  000A2C  EF80  F004         	goto	l1395
  1287  000A30                     u830:
  1288  000A30  BE37               	btfsc	(dtoa@p+1)^0,7,c
  1289  000A32  EF25  F005         	goto	u840
  1290  000A36  5037               	movf	(dtoa@p+1)^0,w,c
  1291  000A38  E106               	bnz	u841
  1292  000A3A  0436               	decf	dtoa@p^0,w,c
  1293  000A3C  B0D8               	btfsc	status,0,c
  1294  000A3E  EF23  F005         	goto	u841
  1295  000A42  EF25  F005         	goto	u840
  1296  000A46                     u841:
  1297  000A46  EF80  F004         	goto	l1395
  1298  000A4A                     u840:
  1299  000A4A  BE39               	btfsc	(dtoa@w+1)^0,7,c
  1300  000A4C  EF30  F005         	goto	u851
  1301  000A50  5039               	movf	(dtoa@w+1)^0,w,c
  1302  000A52  E108               	bnz	u850
  1303  000A54  0438               	decf	dtoa@w^0,w,c
  1304  000A56  A0D8               	btfss	status,0,c
  1305  000A58  EF30  F005         	goto	u851
  1306  000A5C  EF32  F005         	goto	u850
  1307  000A60                     u851:
  1308  000A60  EF3A  F005         	goto	l1415
  1309  000A64                     u850:
  1310  000A64  0100               	movlb	0	; () banked
  1311  000A66  B366               	btfsc	_flags& (0+255),1,b
  1312  000A68  EF38  F005         	goto	u861
  1313  000A6C  EF3A  F005         	goto	u860
  1314  000A70                     u861:
  1315  000A70  EF80  F004         	goto	l1395
  1316  000A74                     u860:
  1317  000A74                     l1415:
  1318                           
  1319                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 308:     if
      +                           (s || (flags & (1 << 2))) {
  1320  000A74  503A               	movf	dtoa@s^0,w,c
  1321  000A76  103B               	iorwf	(dtoa@s+1)^0,w,c
  1322  000A78  A4D8               	btfss	status,2,c
  1323  000A7A  EF41  F005         	goto	u871
  1324  000A7E  EF43  F005         	goto	u870
  1325  000A82                     u871:
  1326  000A82  EF4B  F005         	goto	l1419
  1327  000A86                     u870:
  1328  000A86  0100               	movlb	0	; () banked
  1329  000A88  A566               	btfss	_flags& (0+255),2,b
  1330  000A8A  EF49  F005         	goto	u881
  1331  000A8E  EF4B  F005         	goto	u880
  1332  000A92                     u881:
  1333  000A92  EF69  F005         	goto	l1429
  1334  000A96                     u880:
  1335  000A96                     l1419:
  1336                           
  1337                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 309:       
      +                            --i;
  1338  000A96  0644               	decf	dtoa@i^0,f,c
  1339  000A98  A0D8               	btfss	status,0,c
  1340  000A9A  0645               	decf	(dtoa@i+1)^0,f,c
  1341  000A9C                     
  1342                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 310:       
      +                            dbuf[i] = s ? '-' : '+';
  1343  000A9C  503A               	movf	dtoa@s^0,w,c
  1344  000A9E  103B               	iorwf	(dtoa@s+1)^0,w,c
  1345  000AA0  A4D8               	btfss	status,2,c
  1346  000AA2  EF55  F005         	goto	u891
  1347  000AA6  EF57  F005         	goto	u890
  1348  000AAA                     u891:
  1349  000AAA  EF5D  F005         	goto	l1425
  1350  000AAE                     u890:
  1351  000AAE  0E00               	movlw	0
  1352  000AB0  6E35               	movwf	(_dtoa$350+1)^0,c
  1353  000AB2  0E2B               	movlw	43
  1354  000AB4  6E34               	movwf	_dtoa$350^0,c
  1355  000AB6  EF61  F005         	goto	l1427
  1356  000ABA                     l1425:
  1357  000ABA  0E00               	movlw	0
  1358  000ABC  6E35               	movwf	(_dtoa$350+1)^0,c
  1359  000ABE  0E2D               	movlw	45
  1360  000AC0  6E34               	movwf	_dtoa$350^0,c
  1361  000AC2                     l1427:
  1362  000AC2  0E69               	movlw	low _dbuf
  1363  000AC4  2444               	addwf	dtoa@i^0,w,c
  1364  000AC6  6ED9               	movwf	fsr2l,c
  1365  000AC8  0E00               	movlw	high _dbuf
  1366  000ACA  2045               	addwfc	(dtoa@i+1)^0,w,c
  1367  000ACC  6EDA               	movwf	fsr2h,c
  1368  000ACE  C034  FFDF         	movff	_dtoa$350,indf2
  1369  000AD2                     l1429:
  1370                           
  1371                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 314:     re
      +                          turn pad(fp, &dbuf[i], w);
  1372  000AD2  C022  F017         	movff	dtoa@fp,pad@fp
  1373  000AD6  C023  F018         	movff	dtoa@fp+1,pad@fp+1
  1374  000ADA  0E69               	movlw	low _dbuf
  1375  000ADC  2444               	addwf	dtoa@i^0,w,c
  1376  000ADE  6E19               	movwf	pad@buf^0,c
  1377  000AE0  0E00               	movlw	high _dbuf
  1378  000AE2  2045               	addwfc	(dtoa@i+1)^0,w,c
  1379  000AE4  6E1A               	movwf	(pad@buf+1)^0,c
  1380  000AE6  C038  F01B         	movff	dtoa@w,pad@p
  1381  000AEA  C039  F01C         	movff	dtoa@w+1,pad@p+1
  1382  000AEE  ECCE  F007         	call	_pad	;wreg free
  1383  000AF2  C017  F022         	movff	?_pad,?_dtoa
  1384  000AF6  C018  F023         	movff	?_pad+1,?_dtoa+1
  1385  000AFA  0012               	return		;funcret
  1386  000AFC                     __end_of_dtoa:
  1387                           	opt callstack 0
  1388                           
  1389 ;; *************** function _pad *****************
  1390 ;; Defined at:
  1391 ;;		line 72 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c"
  1392 ;; Parameters:    Size  Location     Type
  1393 ;;  fp              2   22[COMRAM] PTR struct _IO_FILE
  1394 ;;		 -> NULL(0), 
  1395 ;;  buf             2   24[COMRAM] PTR unsigned char 
  1396 ;;		 -> dbuf(32), 
  1397 ;;  p               2   26[COMRAM] int 
  1398 ;; Auto vars:     Size  Location     Type
  1399 ;;  w               2   31[COMRAM] int 
  1400 ;;  i               2   29[COMRAM] int 
  1401 ;; Return value:  Size  Location     Type
  1402 ;;                  2   22[COMRAM] int 
  1403 ;; Registers used:
  1404 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1405 ;; Tracked objects:
  1406 ;;		On entry : 0/0
  1407 ;;		On exit  : 0/0
  1408 ;;		Unchanged: 0/0
  1409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1410 ;;      Params:         6       0       0       0       0       0       0       0       0
  1411 ;;      Locals:         4       0       0       0       0       0       0       0       0
  1412 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1413 ;;      Totals:        11       0       0       0       0       0       0       0       0
  1414 ;;Total ram usage:       11 bytes
  1415 ;; Hardware stack levels used:    1
  1416 ;; Hardware stack levels required when called:    7
  1417 ;; This function calls:
  1418 ;;		_fputc
  1419 ;;		_fputs
  1420 ;;		_strlen
  1421 ;; This function is called by:
  1422 ;;		_dtoa
  1423 ;; This function uses a non-reentrant model
  1424 ;;
  1425                           
  1426                           	psect	text5
  1427  000F9C                     __ptext5:
  1428                           	opt callstack 0
  1429  000F9C                     _pad:
  1430                           	opt callstack 19
  1431  000F9C                     
  1432                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 72: static 
      +                          int pad(FILE *fp, char *buf, int p);C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sourc
      +                          es\c99\common\doprnt.c: 73: {;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99
      +                          \common\doprnt.c: 74:     int i, w;;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sourc
      +                          es\c99\common\doprnt.c: 77:     if (flags & (1 << 0)) {
  1433  000F9C  0100               	movlb	0	; () banked
  1434  000F9E  A166               	btfss	_flags& (0+255),0,b
  1435  000FA0  EFD4  F007         	goto	u571
  1436  000FA4  EFD6  F007         	goto	u570
  1437  000FA8                     u571:
  1438  000FA8  EFE0  F007         	goto	l1269
  1439  000FAC                     u570:
  1440  000FAC                     
  1441                           ; BSR set to: 0
  1442                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 78:        
      +                           fputs((const char *)buf, fp);
  1443  000FAC  C019  F010         	movff	pad@buf,fputs@s
  1444  000FB0  C01A  F011         	movff	pad@buf+1,fputs@s+1
  1445  000FB4  C017  F012         	movff	pad@fp,fputs@fp
  1446  000FB8  C018  F013         	movff	pad@fp+1,fputs@fp+1
  1447  000FBC  EC6E  F009         	call	_fputs	;wreg free
  1448  000FC0                     l1269:
  1449                           
  1450                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 82:     w =
      +                           (p < 0) ? 0 : p;
  1451  000FC0  BE1C               	btfsc	(pad@p+1)^0,7,c
  1452  000FC2  EFE5  F007         	goto	u581
  1453  000FC6  EFE7  F007         	goto	u580
  1454  000FCA                     u581:
  1455  000FCA  EFED  F007         	goto	l1273
  1456  000FCE                     u580:
  1457  000FCE  C01B  F020         	movff	pad@p,pad@w
  1458  000FD2  C01C  F021         	movff	pad@p+1,pad@w+1
  1459  000FD6  EFF1  F007         	goto	l96
  1460  000FDA                     l1273:
  1461  000FDA  0E00               	movlw	0
  1462  000FDC  6E21               	movwf	(pad@w+1)^0,c
  1463  000FDE  0E00               	movlw	0
  1464  000FE0  6E20               	movwf	pad@w^0,c
  1465  000FE2                     l96:
  1466                           
  1467                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 83:     i =
      +                           0;
  1468  000FE2  0E00               	movlw	0
  1469  000FE4  6E1F               	movwf	(pad@i+1)^0,c
  1470  000FE6  0E00               	movlw	0
  1471  000FE8  6E1E               	movwf	pad@i^0,c
  1472                           
  1473                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  1474  000FEA  EF03  F008         	goto	l1279
  1475  000FEE                     l1275:
  1476                           
  1477                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 85:        
      +                           fputc(' ', fp);
  1478  000FEE  0E00               	movlw	0
  1479  000FF0  6E08               	movwf	(fputc@c+1)^0,c
  1480  000FF2  0E20               	movlw	32
  1481  000FF4  6E07               	movwf	fputc@c^0,c
  1482  000FF6  C017  F009         	movff	pad@fp,fputc@fp
  1483  000FFA  C018  F00A         	movff	pad@fp+1,fputc@fp+1
  1484  000FFE  EC31  F008         	call	_fputc	;wreg free
  1485  001002                     
  1486                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 86:        
      +                           ++i;
  1487  001002  4A1E               	infsnz	pad@i^0,f,c
  1488  001004  2A1F               	incf	(pad@i+1)^0,f,c
  1489  001006                     l1279:
  1490                           
  1491                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  1492  001006  5020               	movf	pad@w^0,w,c
  1493  001008  5C1E               	subwf	pad@i^0,w,c
  1494  00100A  501F               	movf	(pad@i+1)^0,w,c
  1495  00100C  0A80               	xorlw	128
  1496  00100E  6E1D               	movwf	??_pad^0,c
  1497  001010  5021               	movf	(pad@w+1)^0,w,c
  1498  001012  0A80               	xorlw	128
  1499  001014  581D               	subwfb	??_pad^0,w,c
  1500  001016  A0D8               	btfss	status,0,c
  1501  001018  EF10  F008         	goto	u591
  1502  00101C  EF12  F008         	goto	u590
  1503  001020                     u591:
  1504  001020  EFF7  F007         	goto	l1275
  1505  001024                     u590:
  1506  001024                     
  1507                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 90:     if 
      +                          (!(flags & (1 << 0))) {
  1508  001024  0100               	movlb	0	; () banked
  1509  001026  B166               	btfsc	_flags& (0+255),0,b
  1510  001028  EF18  F008         	goto	u601
  1511  00102C  EF1A  F008         	goto	u600
  1512  001030                     u601:
  1513  001030  EF24  F008         	goto	l1283
  1514  001034                     u600:
  1515  001034                     
  1516                           ; BSR set to: 0
  1517                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 91:        
      +                           fputs((const char *)buf, fp);
  1518  001034  C019  F010         	movff	pad@buf,fputs@s
  1519  001038  C01A  F011         	movff	pad@buf+1,fputs@s+1
  1520  00103C  C017  F012         	movff	pad@fp,fputs@fp
  1521  001040  C018  F013         	movff	pad@fp+1,fputs@fp+1
  1522  001044  EC6E  F009         	call	_fputs	;wreg free
  1523  001048                     l1283:
  1524                           
  1525                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 94:     ret
      +                          urn strlen(buf) + w;
  1526  001048  C019  F001         	movff	pad@buf,strlen@s
  1527  00104C  C01A  F002         	movff	pad@buf+1,strlen@s+1
  1528  001050  ECD1  F009         	call	_strlen	;wreg free
  1529  001054  5020               	movf	pad@w^0,w,c
  1530  001056  2401               	addwf	?_strlen^0,w,c
  1531  001058  6E17               	movwf	?_pad^0,c
  1532  00105A  5021               	movf	(pad@w+1)^0,w,c
  1533  00105C  2002               	addwfc	(?_strlen+1)^0,w,c
  1534  00105E  6E18               	movwf	(?_pad+1)^0,c
  1535  001060  0012               	return		;funcret
  1536  001062                     __end_of_pad:
  1537                           	opt callstack 0
  1538                           
  1539 ;; *************** function _strlen *****************
  1540 ;; Defined at:
  1541 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\strlen.c"
  1542 ;; Parameters:    Size  Location     Type
  1543 ;;  s               2    0[COMRAM] PTR const unsigned char 
  1544 ;;		 -> dbuf(32), 
  1545 ;; Auto vars:     Size  Location     Type
  1546 ;;  a               2    2[COMRAM] PTR const unsigned char 
  1547 ;;		 -> dbuf(32), 
  1548 ;; Return value:  Size  Location     Type
  1549 ;;                  2    0[COMRAM] unsigned int 
  1550 ;; Registers used:
  1551 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1552 ;; Tracked objects:
  1553 ;;		On entry : 0/0
  1554 ;;		On exit  : 0/0
  1555 ;;		Unchanged: 0/0
  1556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1557 ;;      Params:         2       0       0       0       0       0       0       0       0
  1558 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1559 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1560 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1561 ;;Total ram usage:        4 bytes
  1562 ;; Hardware stack levels used:    1
  1563 ;; Hardware stack levels required when called:    1
  1564 ;; This function calls:
  1565 ;;		Nothing
  1566 ;; This function is called by:
  1567 ;;		_pad
  1568 ;; This function uses a non-reentrant model
  1569 ;;
  1570                           
  1571                           	psect	text6
  1572  0013A2                     __ptext6:
  1573                           	opt callstack 0
  1574  0013A2                     _strlen:
  1575                           	opt callstack 24
  1576  0013A2  C001  F003         	movff	strlen@s,strlen@a
  1577  0013A6  C002  F004         	movff	strlen@s+1,strlen@a+1
  1578  0013AA  EFD9  F009         	goto	l1259
  1579  0013AE                     l1257:
  1580  0013AE  4A01               	infsnz	strlen@s^0,f,c
  1581  0013B0  2A02               	incf	(strlen@s+1)^0,f,c
  1582  0013B2                     l1259:
  1583  0013B2  C001  FFD9         	movff	strlen@s,fsr2l
  1584  0013B6  C002  FFDA         	movff	strlen@s+1,fsr2h
  1585  0013BA  50DF               	movf	indf2,w,c
  1586  0013BC  A4D8               	btfss	status,2,c
  1587  0013BE  EFE3  F009         	goto	u561
  1588  0013C2  EFE5  F009         	goto	u560
  1589  0013C6                     u561:
  1590  0013C6  EFD7  F009         	goto	l1257
  1591  0013CA                     u560:
  1592  0013CA  5003               	movf	strlen@a^0,w,c
  1593  0013CC  5C01               	subwf	strlen@s^0,w,c
  1594  0013CE  6E01               	movwf	?_strlen^0,c
  1595  0013D0  5004               	movf	(strlen@a+1)^0,w,c
  1596  0013D2  5802               	subwfb	(strlen@s+1)^0,w,c
  1597  0013D4  6E02               	movwf	(?_strlen+1)^0,c
  1598  0013D6  0012               	return		;funcret
  1599  0013D8                     __end_of_strlen:
  1600                           	opt callstack 0
  1601                           
  1602 ;; *************** function _fputs *****************
  1603 ;; Defined at:
  1604 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\nf_fputs.c"
  1605 ;; Parameters:    Size  Location     Type
  1606 ;;  s               2   15[COMRAM] PTR const unsigned char 
  1607 ;;		 -> dbuf(32), 
  1608 ;;  fp              2   17[COMRAM] PTR struct _IO_FILE
  1609 ;;		 -> NULL(0), 
  1610 ;; Auto vars:     Size  Location     Type
  1611 ;;  i               2   20[COMRAM] int 
  1612 ;;  c               1   19[COMRAM] unsigned char 
  1613 ;; Return value:  Size  Location     Type
  1614 ;;                  2   15[COMRAM] int 
  1615 ;; Registers used:
  1616 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1617 ;; Tracked objects:
  1618 ;;		On entry : 0/0
  1619 ;;		On exit  : 0/0
  1620 ;;		Unchanged: 0/0
  1621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1622 ;;      Params:         4       0       0       0       0       0       0       0       0
  1623 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1624 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1625 ;;      Totals:         7       0       0       0       0       0       0       0       0
  1626 ;;Total ram usage:        7 bytes
  1627 ;; Hardware stack levels used:    1
  1628 ;; Hardware stack levels required when called:    6
  1629 ;; This function calls:
  1630 ;;		_fputc
  1631 ;; This function is called by:
  1632 ;;		_pad
  1633 ;; This function uses a non-reentrant model
  1634 ;;
  1635                           
  1636                           	psect	text7
  1637  0012DC                     __ptext7:
  1638                           	opt callstack 0
  1639  0012DC                     _fputs:
  1640                           	opt callstack 19
  1641  0012DC  0E00               	movlw	0
  1642  0012DE  6E16               	movwf	(fputs@i+1)^0,c
  1643  0012E0  0E00               	movlw	0
  1644  0012E2  6E15               	movwf	fputs@i^0,c
  1645  0012E4  EF7F  F009         	goto	l1253
  1646  0012E8                     l1249:
  1647  0012E8  C014  F007         	movff	fputs@c,fputc@c
  1648  0012EC  6A08               	clrf	(fputc@c+1)^0,c
  1649  0012EE  C012  F009         	movff	fputs@fp,fputc@fp
  1650  0012F2  C013  F00A         	movff	fputs@fp+1,fputc@fp+1
  1651  0012F6  EC31  F008         	call	_fputc	;wreg free
  1652  0012FA  4A15               	infsnz	fputs@i^0,f,c
  1653  0012FC  2A16               	incf	(fputs@i+1)^0,f,c
  1654  0012FE                     l1253:
  1655  0012FE  5015               	movf	fputs@i^0,w,c
  1656  001300  2410               	addwf	fputs@s^0,w,c
  1657  001302  6ED9               	movwf	fsr2l,c
  1658  001304  5016               	movf	(fputs@i+1)^0,w,c
  1659  001306  2011               	addwfc	(fputs@s+1)^0,w,c
  1660  001308  6EDA               	movwf	fsr2h,c
  1661  00130A  50DF               	movf	indf2,w,c
  1662  00130C  6E14               	movwf	fputs@c^0,c
  1663  00130E  5014               	movf	fputs@c^0,w,c
  1664  001310  A4D8               	btfss	status,2,c
  1665  001312  EF8D  F009         	goto	u551
  1666  001316  EF8F  F009         	goto	u550
  1667  00131A                     u551:
  1668  00131A  EF74  F009         	goto	l1249
  1669  00131E                     u550:
  1670  00131E  0012               	return		;funcret
  1671  001320                     __end_of_fputs:
  1672                           	opt callstack 0
  1673                           
  1674 ;; *************** function _fputc *****************
  1675 ;; Defined at:
  1676 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\nf_fputc.c"
  1677 ;; Parameters:    Size  Location     Type
  1678 ;;  c               2    6[COMRAM] int 
  1679 ;;  fp              2    8[COMRAM] PTR struct _IO_FILE
  1680 ;;		 -> NULL(0), 
  1681 ;; Auto vars:     Size  Location     Type
  1682 ;;		None
  1683 ;; Return value:  Size  Location     Type
  1684 ;;                  2    6[COMRAM] int 
  1685 ;; Registers used:
  1686 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1687 ;; Tracked objects:
  1688 ;;		On entry : 0/0
  1689 ;;		On exit  : 0/0
  1690 ;;		Unchanged: 0/0
  1691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1692 ;;      Params:         4       0       0       0       0       0       0       0       0
  1693 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1694 ;;      Temps:          5       0       0       0       0       0       0       0       0
  1695 ;;      Totals:         9       0       0       0       0       0       0       0       0
  1696 ;;Total ram usage:        9 bytes
  1697 ;; Hardware stack levels used:    1
  1698 ;; Hardware stack levels required when called:    5
  1699 ;; This function calls:
  1700 ;;		_putch
  1701 ;; This function is called by:
  1702 ;;		_pad
  1703 ;;		_vfpfcnvrt
  1704 ;;		_fputs
  1705 ;; This function uses a non-reentrant model
  1706 ;;
  1707                           
  1708                           	psect	text8
  1709  001062                     __ptext8:
  1710                           	opt callstack 0
  1711  001062                     _fputc:
  1712                           	opt callstack 22
  1713  001062  5009               	movf	fputc@fp^0,w,c
  1714  001064  100A               	iorwf	(fputc@fp+1)^0,w,c
  1715  001066  B4D8               	btfsc	status,2,c
  1716  001068  EF38  F008         	goto	u511
  1717  00106C  EF3A  F008         	goto	u510
  1718  001070                     u511:
  1719  001070  EF43  F008         	goto	l1237
  1720  001074                     u510:
  1721  001074  5009               	movf	fputc@fp^0,w,c
  1722  001076  100A               	iorwf	(fputc@fp+1)^0,w,c
  1723  001078  A4D8               	btfss	status,2,c
  1724  00107A  EF41  F008         	goto	u521
  1725  00107E  EF43  F008         	goto	u520
  1726  001082                     u521:
  1727  001082  EF48  F008         	goto	l1239
  1728  001086                     u520:
  1729  001086                     l1237:
  1730  001086  5007               	movf	fputc@c^0,w,c
  1731  001088  EC42  F00A         	call	_putch
  1732  00108C  EF7B  F008         	goto	l834
  1733  001090                     l1239:
  1734  001090  EE20 F004          	lfsr	2,4
  1735  001094  5009               	movf	fputc@fp^0,w,c
  1736  001096  26D9               	addwf	fsr2l,f,c
  1737  001098  500A               	movf	(fputc@fp+1)^0,w,c
  1738  00109A  22DA               	addwfc	fsr2h,f,c
  1739  00109C  50DE               	movf	postinc2,w,c
  1740  00109E  10DE               	iorwf	postinc2,w,c
  1741  0010A0  B4D8               	btfsc	status,2,c
  1742  0010A2  EF55  F008         	goto	u531
  1743  0010A6  EF57  F008         	goto	u530
  1744  0010AA                     u531:
  1745  0010AA  EF72  F008         	goto	l1243
  1746  0010AE                     u530:
  1747  0010AE  EE20 F004          	lfsr	2,4
  1748  0010B2  5009               	movf	fputc@fp^0,w,c
  1749  0010B4  26D9               	addwf	fsr2l,f,c
  1750  0010B6  500A               	movf	(fputc@fp+1)^0,w,c
  1751  0010B8  22DA               	addwfc	fsr2h,f,c
  1752  0010BA  EE10 F002          	lfsr	1,2
  1753  0010BE  5009               	movf	fputc@fp^0,w,c
  1754  0010C0  26E1               	addwf	fsr1l,f,c
  1755  0010C2  500A               	movf	(fputc@fp+1)^0,w,c
  1756  0010C4  22E2               	addwfc	fsr1h,f,c
  1757  0010C6  50DE               	movf	postinc2,w,c
  1758  0010C8  5CE6               	subwf	postinc1,w,c
  1759  0010CA  50E6               	movf	postinc1,w,c
  1760  0010CC  0A80               	xorlw	128
  1761  0010CE  6E0F               	movwf	(??_fputc+4)^0,c
  1762  0010D0  50DE               	movf	postinc2,w,c
  1763  0010D2  0A80               	xorlw	128
  1764  0010D4  580F               	subwfb	(??_fputc+4)^0,w,c
  1765  0010D6  B0D8               	btfsc	status,0,c
  1766  0010D8  EF70  F008         	goto	u541
  1767  0010DC  EF72  F008         	goto	u540
  1768  0010E0                     u541:
  1769  0010E0  EF7B  F008         	goto	l834
  1770  0010E4                     u540:
  1771  0010E4                     l1243:
  1772  0010E4  EE20 F002          	lfsr	2,2
  1773  0010E8  5009               	movf	fputc@fp^0,w,c
  1774  0010EA  26D9               	addwf	fsr2l,f,c
  1775  0010EC  500A               	movf	(fputc@fp+1)^0,w,c
  1776  0010EE  22DA               	addwfc	fsr2h,f,c
  1777  0010F0  2ADE               	incf	postinc2,f,c
  1778  0010F2  0E00               	movlw	0
  1779  0010F4  22DD               	addwfc	postdec2,f,c
  1780  0010F6                     l834:
  1781  0010F6  0012               	return		;funcret
  1782  0010F8                     __end_of_fputc:
  1783                           	opt callstack 0
  1784                           
  1785 ;; *************** function _putch *****************
  1786 ;; Defined at:
  1787 ;;		line 20 in file "main.c"
  1788 ;; Parameters:    Size  Location     Type
  1789 ;;  data            1    wreg     unsigned char 
  1790 ;; Auto vars:     Size  Location     Type
  1791 ;;  data            1    5[COMRAM] unsigned char 
  1792 ;; Return value:  Size  Location     Type
  1793 ;;                  1    wreg      void 
  1794 ;; Registers used:
  1795 ;;		wreg, status,2, status,0, cstack
  1796 ;; Tracked objects:
  1797 ;;		On entry : 0/0
  1798 ;;		On exit  : 0/0
  1799 ;;		Unchanged: 0/0
  1800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1801 ;;      Params:         0       0       0       0       0       0       0       0       0
  1802 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1803 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1804 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1805 ;;Total ram usage:        1 bytes
  1806 ;; Hardware stack levels used:    1
  1807 ;; Hardware stack levels required when called:    4
  1808 ;; This function calls:
  1809 ;;		_escreve_lcd
  1810 ;; This function is called by:
  1811 ;;		_fputc
  1812 ;; This function uses a non-reentrant model
  1813 ;;
  1814                           
  1815                           	psect	text9
  1816  001484                     __ptext9:
  1817                           	opt callstack 0
  1818  001484                     _putch:
  1819                           	opt callstack 22
  1820                           
  1821                           ;incstack = 0
  1822                           ;putch@data stored from wreg
  1823  001484  6E06               	movwf	putch@data^0,c
  1824  001486                     
  1825                           ;main.c: 21:   escreve_lcd(data);
  1826  001486  5006               	movf	putch@data^0,w,c
  1827  001488  EC3B  F00A         	call	_escreve_lcd
  1828  00148C  0012               	return		;funcret
  1829  00148E                     __end_of_putch:
  1830                           	opt callstack 0
  1831                           
  1832 ;; *************** function _escreve_lcd *****************
  1833 ;; Defined at:
  1834 ;;		line 40 in file "lcd.c"
  1835 ;; Parameters:    Size  Location     Type
  1836 ;;  c               1    wreg     unsigned char 
  1837 ;; Auto vars:     Size  Location     Type
  1838 ;;  c               1    4[COMRAM] unsigned char 
  1839 ;; Return value:  Size  Location     Type
  1840 ;;                  1    wreg      void 
  1841 ;; Registers used:
  1842 ;;		wreg, status,2, status,0, cstack
  1843 ;; Tracked objects:
  1844 ;;		On entry : 0/0
  1845 ;;		On exit  : 0/0
  1846 ;;		Unchanged: 0/0
  1847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1848 ;;      Params:         0       0       0       0       0       0       0       0       0
  1849 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1850 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1851 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1852 ;;Total ram usage:        1 bytes
  1853 ;; Hardware stack levels used:    1
  1854 ;; Hardware stack levels required when called:    3
  1855 ;; This function calls:
  1856 ;;		_envia_byte_lcd
  1857 ;; This function is called by:
  1858 ;;		_putch
  1859 ;; This function uses a non-reentrant model
  1860 ;;
  1861                           
  1862                           	psect	text10
  1863  001476                     __ptext10:
  1864                           	opt callstack 0
  1865  001476                     _escreve_lcd:
  1866                           	opt callstack 22
  1867                           
  1868                           ;incstack = 0
  1869                           ;escreve_lcd@c stored from wreg
  1870  001476  6E05               	movwf	escreve_lcd@c^0,c
  1871  001478  C005  F003         	movff	escreve_lcd@c,envia_byte_lcd@dado
  1872  00147C  0E01               	movlw	1
  1873  00147E  EC1A  F00A         	call	_envia_byte_lcd
  1874  001482  0012               	return		;funcret
  1875  001484                     __end_of_escreve_lcd:
  1876                           	opt callstack 0
  1877                           
  1878 ;; *************** function _abs *****************
  1879 ;; Defined at:
  1880 ;;		line 1 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\abs.c"
  1881 ;; Parameters:    Size  Location     Type
  1882 ;;  a               2   18[COMRAM] int 
  1883 ;; Auto vars:     Size  Location     Type
  1884 ;;		None
  1885 ;; Return value:  Size  Location     Type
  1886 ;;                  2   18[COMRAM] int 
  1887 ;; Registers used:
  1888 ;;		wreg, status,2, status,0
  1889 ;; Tracked objects:
  1890 ;;		On entry : 0/0
  1891 ;;		On exit  : 0/0
  1892 ;;		Unchanged: 0/0
  1893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1894 ;;      Params:         2       0       0       0       0       0       0       0       0
  1895 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1896 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1897 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1898 ;;Total ram usage:        4 bytes
  1899 ;; Hardware stack levels used:    1
  1900 ;; Hardware stack levels required when called:    1
  1901 ;; This function calls:
  1902 ;;		Nothing
  1903 ;; This function is called by:
  1904 ;;		_dtoa
  1905 ;; This function uses a non-reentrant model
  1906 ;;
  1907                           
  1908                           	psect	text11
  1909  001362                     __ptext11:
  1910                           	opt callstack 0
  1911  001362                     _abs:
  1912                           	opt callstack 25
  1913  001362  BE14               	btfsc	(abs@a+1)^0,7,c
  1914  001364  EFBE  F009         	goto	u610
  1915  001368  5014               	movf	(abs@a+1)^0,w,c
  1916  00136A  E106               	bnz	u611
  1917  00136C  0413               	decf	abs@a^0,w,c
  1918  00136E  B0D8               	btfsc	status,0,c
  1919  001370  EFBC  F009         	goto	u611
  1920  001374  EFBE  F009         	goto	u610
  1921  001378                     u611:
  1922  001378  EFCC  F009         	goto	l819
  1923  00137C                     u610:
  1924  00137C  C013  F015         	movff	abs@a,??_abs
  1925  001380  C014  F016         	movff	abs@a+1,??_abs+1
  1926  001384  1E15               	comf	??_abs^0,f,c
  1927  001386  1E16               	comf	(??_abs+1)^0,f,c
  1928  001388  4A15               	infsnz	??_abs^0,f,c
  1929  00138A  2A16               	incf	(??_abs+1)^0,f,c
  1930  00138C  C015  F013         	movff	??_abs,?_abs
  1931  001390  C016  F014         	movff	??_abs+1,?_abs+1
  1932  001394  EFD0  F009         	goto	l822
  1933  001398                     l819:
  1934  001398  C013  F013         	movff	abs@a,?_abs
  1935  00139C  C014  F014         	movff	abs@a+1,?_abs+1
  1936  0013A0                     l822:
  1937  0013A0  0012               	return		;funcret
  1938  0013A2                     __end_of_abs:
  1939                           	opt callstack 0
  1940                           
  1941 ;; *************** function ___aomod *****************
  1942 ;; Defined at:
  1943 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\aomod.c"
  1944 ;; Parameters:    Size  Location     Type
  1945 ;;  dividend        8    0[COMRAM] long long 
  1946 ;;  divisor         8    8[COMRAM] long long 
  1947 ;; Auto vars:     Size  Location     Type
  1948 ;;  sign            1   17[COMRAM] unsigned char 
  1949 ;;  counter         1   16[COMRAM] unsigned char 
  1950 ;; Return value:  Size  Location     Type
  1951 ;;                  8    0[COMRAM] long long 
  1952 ;; Registers used:
  1953 ;;		wreg, status,2, status,0
  1954 ;; Tracked objects:
  1955 ;;		On entry : 0/0
  1956 ;;		On exit  : 0/0
  1957 ;;		Unchanged: 0/0
  1958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1959 ;;      Params:        16       0       0       0       0       0       0       0       0
  1960 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1961 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1962 ;;      Totals:        18       0       0       0       0       0       0       0       0
  1963 ;;Total ram usage:       18 bytes
  1964 ;; Hardware stack levels used:    1
  1965 ;; Hardware stack levels required when called:    1
  1966 ;; This function calls:
  1967 ;;		Nothing
  1968 ;; This function is called by:
  1969 ;;		_dtoa
  1970 ;; This function uses a non-reentrant model
  1971 ;;
  1972                           
  1973                           	psect	text12
  1974  000E38                     __ptext12:
  1975                           	opt callstack 0
  1976  000E38                     ___aomod:
  1977                           	opt callstack 25
  1978  000E38  0E00               	movlw	0
  1979  000E3A  6E12               	movwf	___aomod@sign^0,c
  1980  000E3C  BE08               	btfsc	(___aomod@dividend+7)^0,7,c
  1981  000E3E  EF25  F007         	goto	u690
  1982  000E42  EF23  F007         	goto	u691
  1983  000E46                     u691:
  1984  000E46  EF37  F007         	goto	l1343
  1985  000E4A                     u690:
  1986  000E4A  1E08               	comf	(___aomod@dividend+7)^0,f,c
  1987  000E4C  1E07               	comf	(___aomod@dividend+6)^0,f,c
  1988  000E4E  1E06               	comf	(___aomod@dividend+5)^0,f,c
  1989  000E50  1E05               	comf	(___aomod@dividend+4)^0,f,c
  1990  000E52  1E04               	comf	(___aomod@dividend+3)^0,f,c
  1991  000E54  1E03               	comf	(___aomod@dividend+2)^0,f,c
  1992  000E56  1E02               	comf	(___aomod@dividend+1)^0,f,c
  1993  000E58  6C01               	negf	___aomod@dividend^0,c
  1994  000E5A  0E00               	movlw	0
  1995  000E5C  2202               	addwfc	(___aomod@dividend+1)^0,f,c
  1996  000E5E  2203               	addwfc	(___aomod@dividend+2)^0,f,c
  1997  000E60  2204               	addwfc	(___aomod@dividend+3)^0,f,c
  1998  000E62  2205               	addwfc	(___aomod@dividend+4)^0,f,c
  1999  000E64  2206               	addwfc	(___aomod@dividend+5)^0,f,c
  2000  000E66  2207               	addwfc	(___aomod@dividend+6)^0,f,c
  2001  000E68  2208               	addwfc	(___aomod@dividend+7)^0,f,c
  2002  000E6A  0E01               	movlw	1
  2003  000E6C  6E12               	movwf	___aomod@sign^0,c
  2004  000E6E                     l1343:
  2005  000E6E  BE10               	btfsc	(___aomod@divisor+7)^0,7,c
  2006  000E70  EF3E  F007         	goto	u700
  2007  000E74  EF3C  F007         	goto	u701
  2008  000E78                     u701:
  2009  000E78  EF4E  F007         	goto	l1347
  2010  000E7C                     u700:
  2011  000E7C  1E10               	comf	(___aomod@divisor+7)^0,f,c
  2012  000E7E  1E0F               	comf	(___aomod@divisor+6)^0,f,c
  2013  000E80  1E0E               	comf	(___aomod@divisor+5)^0,f,c
  2014  000E82  1E0D               	comf	(___aomod@divisor+4)^0,f,c
  2015  000E84  1E0C               	comf	(___aomod@divisor+3)^0,f,c
  2016  000E86  1E0B               	comf	(___aomod@divisor+2)^0,f,c
  2017  000E88  1E0A               	comf	(___aomod@divisor+1)^0,f,c
  2018  000E8A  6C09               	negf	___aomod@divisor^0,c
  2019  000E8C  0E00               	movlw	0
  2020  000E8E  220A               	addwfc	(___aomod@divisor+1)^0,f,c
  2021  000E90  220B               	addwfc	(___aomod@divisor+2)^0,f,c
  2022  000E92  220C               	addwfc	(___aomod@divisor+3)^0,f,c
  2023  000E94  220D               	addwfc	(___aomod@divisor+4)^0,f,c
  2024  000E96  220E               	addwfc	(___aomod@divisor+5)^0,f,c
  2025  000E98  220F               	addwfc	(___aomod@divisor+6)^0,f,c
  2026  000E9A  2210               	addwfc	(___aomod@divisor+7)^0,f,c
  2027  000E9C                     l1347:
  2028  000E9C  5009               	movf	___aomod@divisor^0,w,c
  2029  000E9E  100A               	iorwf	(___aomod@divisor+1)^0,w,c
  2030  000EA0  100B               	iorwf	(___aomod@divisor+2)^0,w,c
  2031  000EA2  100C               	iorwf	(___aomod@divisor+3)^0,w,c
  2032  000EA4  100D               	iorwf	(___aomod@divisor+4)^0,w,c
  2033  000EA6  100E               	iorwf	(___aomod@divisor+5)^0,w,c
  2034  000EA8  100F               	iorwf	(___aomod@divisor+6)^0,w,c
  2035  000EAA  1010               	iorwf	(___aomod@divisor+7)^0,w,c
  2036  000EAC  B4D8               	btfsc	status,2,c
  2037  000EAE  EF5B  F007         	goto	u711
  2038  000EB2  EF5D  F007         	goto	u710
  2039  000EB6                     u711:
  2040  000EB6  EFA5  F007         	goto	l1363
  2041  000EBA                     u710:
  2042  000EBA  0E01               	movlw	1
  2043  000EBC  6E11               	movwf	___aomod@counter^0,c
  2044  000EBE  EF6B  F007         	goto	l1353
  2045  000EC2                     l1351:
  2046  000EC2  90D8               	bcf	status,0,c
  2047  000EC4  3609               	rlcf	___aomod@divisor^0,f,c
  2048  000EC6  360A               	rlcf	(___aomod@divisor+1)^0,f,c
  2049  000EC8  360B               	rlcf	(___aomod@divisor+2)^0,f,c
  2050  000ECA  360C               	rlcf	(___aomod@divisor+3)^0,f,c
  2051  000ECC  360D               	rlcf	(___aomod@divisor+4)^0,f,c
  2052  000ECE  360E               	rlcf	(___aomod@divisor+5)^0,f,c
  2053  000ED0  360F               	rlcf	(___aomod@divisor+6)^0,f,c
  2054  000ED2  3610               	rlcf	(___aomod@divisor+7)^0,f,c
  2055  000ED4  2A11               	incf	___aomod@counter^0,f,c
  2056  000ED6                     l1353:
  2057  000ED6  AE10               	btfss	(___aomod@divisor+7)^0,7,c
  2058  000ED8  EF70  F007         	goto	u721
  2059  000EDC  EF72  F007         	goto	u720
  2060  000EE0                     u721:
  2061  000EE0  EF61  F007         	goto	l1351
  2062  000EE4                     u720:
  2063  000EE4                     l1355:
  2064  000EE4  5009               	movf	___aomod@divisor^0,w,c
  2065  000EE6  5C01               	subwf	___aomod@dividend^0,w,c
  2066  000EE8  500A               	movf	(___aomod@divisor+1)^0,w,c
  2067  000EEA  5802               	subwfb	(___aomod@dividend+1)^0,w,c
  2068  000EEC  500B               	movf	(___aomod@divisor+2)^0,w,c
  2069  000EEE  5803               	subwfb	(___aomod@dividend+2)^0,w,c
  2070  000EF0  500C               	movf	(___aomod@divisor+3)^0,w,c
  2071  000EF2  5804               	subwfb	(___aomod@dividend+3)^0,w,c
  2072  000EF4  500D               	movf	(___aomod@divisor+4)^0,w,c
  2073  000EF6  5805               	subwfb	(___aomod@dividend+4)^0,w,c
  2074  000EF8  500E               	movf	(___aomod@divisor+5)^0,w,c
  2075  000EFA  5806               	subwfb	(___aomod@dividend+5)^0,w,c
  2076  000EFC  500F               	movf	(___aomod@divisor+6)^0,w,c
  2077  000EFE  5807               	subwfb	(___aomod@dividend+6)^0,w,c
  2078  000F00  5010               	movf	(___aomod@divisor+7)^0,w,c
  2079  000F02  5808               	subwfb	(___aomod@dividend+7)^0,w,c
  2080  000F04  A0D8               	btfss	status,0,c
  2081  000F06  EF87  F007         	goto	u731
  2082  000F0A  EF89  F007         	goto	u730
  2083  000F0E                     u731:
  2084  000F0E  EF99  F007         	goto	l1359
  2085  000F12                     u730:
  2086  000F12  5009               	movf	___aomod@divisor^0,w,c
  2087  000F14  5E01               	subwf	___aomod@dividend^0,f,c
  2088  000F16  500A               	movf	(___aomod@divisor+1)^0,w,c
  2089  000F18  5A02               	subwfb	(___aomod@dividend+1)^0,f,c
  2090  000F1A  500B               	movf	(___aomod@divisor+2)^0,w,c
  2091  000F1C  5A03               	subwfb	(___aomod@dividend+2)^0,f,c
  2092  000F1E  500C               	movf	(___aomod@divisor+3)^0,w,c
  2093  000F20  5A04               	subwfb	(___aomod@dividend+3)^0,f,c
  2094  000F22  500D               	movf	(___aomod@divisor+4)^0,w,c
  2095  000F24  5A05               	subwfb	(___aomod@dividend+4)^0,f,c
  2096  000F26  500E               	movf	(___aomod@divisor+5)^0,w,c
  2097  000F28  5A06               	subwfb	(___aomod@dividend+5)^0,f,c
  2098  000F2A  500F               	movf	(___aomod@divisor+6)^0,w,c
  2099  000F2C  5A07               	subwfb	(___aomod@dividend+6)^0,f,c
  2100  000F2E  5010               	movf	(___aomod@divisor+7)^0,w,c
  2101  000F30  5A08               	subwfb	(___aomod@dividend+7)^0,f,c
  2102  000F32                     l1359:
  2103  000F32  90D8               	bcf	status,0,c
  2104  000F34  3210               	rrcf	(___aomod@divisor+7)^0,f,c
  2105  000F36  320F               	rrcf	(___aomod@divisor+6)^0,f,c
  2106  000F38  320E               	rrcf	(___aomod@divisor+5)^0,f,c
  2107  000F3A  320D               	rrcf	(___aomod@divisor+4)^0,f,c
  2108  000F3C  320C               	rrcf	(___aomod@divisor+3)^0,f,c
  2109  000F3E  320B               	rrcf	(___aomod@divisor+2)^0,f,c
  2110  000F40  320A               	rrcf	(___aomod@divisor+1)^0,f,c
  2111  000F42  3209               	rrcf	___aomod@divisor^0,f,c
  2112  000F44  2E11               	decfsz	___aomod@counter^0,f,c
  2113  000F46  EF72  F007         	goto	l1355
  2114  000F4A                     l1363:
  2115  000F4A  5012               	movf	___aomod@sign^0,w,c
  2116  000F4C  B4D8               	btfsc	status,2,c
  2117  000F4E  EFAB  F007         	goto	u741
  2118  000F52  EFAD  F007         	goto	u740
  2119  000F56                     u741:
  2120  000F56  EFBD  F007         	goto	l1367
  2121  000F5A                     u740:
  2122  000F5A  1E08               	comf	(___aomod@dividend+7)^0,f,c
  2123  000F5C  1E07               	comf	(___aomod@dividend+6)^0,f,c
  2124  000F5E  1E06               	comf	(___aomod@dividend+5)^0,f,c
  2125  000F60  1E05               	comf	(___aomod@dividend+4)^0,f,c
  2126  000F62  1E04               	comf	(___aomod@dividend+3)^0,f,c
  2127  000F64  1E03               	comf	(___aomod@dividend+2)^0,f,c
  2128  000F66  1E02               	comf	(___aomod@dividend+1)^0,f,c
  2129  000F68  6C01               	negf	___aomod@dividend^0,c
  2130  000F6A  0E00               	movlw	0
  2131  000F6C  2202               	addwfc	(___aomod@dividend+1)^0,f,c
  2132  000F6E  2203               	addwfc	(___aomod@dividend+2)^0,f,c
  2133  000F70  2204               	addwfc	(___aomod@dividend+3)^0,f,c
  2134  000F72  2205               	addwfc	(___aomod@dividend+4)^0,f,c
  2135  000F74  2206               	addwfc	(___aomod@dividend+5)^0,f,c
  2136  000F76  2207               	addwfc	(___aomod@dividend+6)^0,f,c
  2137  000F78  2208               	addwfc	(___aomod@dividend+7)^0,f,c
  2138  000F7A                     l1367:
  2139  000F7A  C001  F001         	movff	___aomod@dividend,?___aomod
  2140  000F7E  C002  F002         	movff	___aomod@dividend+1,?___aomod+1
  2141  000F82  C003  F003         	movff	___aomod@dividend+2,?___aomod+2
  2142  000F86  C004  F004         	movff	___aomod@dividend+3,?___aomod+3
  2143  000F8A  C005  F005         	movff	___aomod@dividend+4,?___aomod+4
  2144  000F8E  C006  F006         	movff	___aomod@dividend+5,?___aomod+5
  2145  000F92  C007  F007         	movff	___aomod@dividend+6,?___aomod+6
  2146  000F96  C008  F008         	movff	___aomod@dividend+7,?___aomod+7
  2147  000F9A  0012               	return		;funcret
  2148  000F9C                     __end_of___aomod:
  2149                           	opt callstack 0
  2150                           
  2151 ;; *************** function ___aodiv *****************
  2152 ;; Defined at:
  2153 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\aodiv.c"
  2154 ;; Parameters:    Size  Location     Type
  2155 ;;  dividend        8    0[COMRAM] long long 
  2156 ;;  divisor         8    8[COMRAM] long long 
  2157 ;; Auto vars:     Size  Location     Type
  2158 ;;  quotient        8   18[COMRAM] long long 
  2159 ;;  sign            1   17[COMRAM] unsigned char 
  2160 ;;  counter         1   16[COMRAM] unsigned char 
  2161 ;; Return value:  Size  Location     Type
  2162 ;;                  8    0[COMRAM] long long 
  2163 ;; Registers used:
  2164 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2165 ;; Tracked objects:
  2166 ;;		On entry : 0/0
  2167 ;;		On exit  : 0/0
  2168 ;;		Unchanged: 0/0
  2169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2170 ;;      Params:        16       0       0       0       0       0       0       0       0
  2171 ;;      Locals:        10       0       0       0       0       0       0       0       0
  2172 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2173 ;;      Totals:        26       0       0       0       0       0       0       0       0
  2174 ;;Total ram usage:       26 bytes
  2175 ;; Hardware stack levels used:    1
  2176 ;; Hardware stack levels required when called:    1
  2177 ;; This function calls:
  2178 ;;		Nothing
  2179 ;; This function is called by:
  2180 ;;		_dtoa
  2181 ;; This function uses a non-reentrant model
  2182 ;;
  2183                           
  2184                           	psect	text13
  2185  000CB0                     __ptext13:
  2186                           	opt callstack 0
  2187  000CB0                     ___aodiv:
  2188                           	opt callstack 25
  2189  000CB0  0E00               	movlw	0
  2190  000CB2  6E12               	movwf	___aodiv@sign^0,c
  2191  000CB4  BE10               	btfsc	(___aodiv@divisor+7)^0,7,c
  2192  000CB6  EF61  F006         	goto	u620
  2193  000CBA  EF5F  F006         	goto	u621
  2194  000CBE                     u621:
  2195  000CBE  EF73  F006         	goto	l1299
  2196  000CC2                     u620:
  2197  000CC2  1E10               	comf	(___aodiv@divisor+7)^0,f,c
  2198  000CC4  1E0F               	comf	(___aodiv@divisor+6)^0,f,c
  2199  000CC6  1E0E               	comf	(___aodiv@divisor+5)^0,f,c
  2200  000CC8  1E0D               	comf	(___aodiv@divisor+4)^0,f,c
  2201  000CCA  1E0C               	comf	(___aodiv@divisor+3)^0,f,c
  2202  000CCC  1E0B               	comf	(___aodiv@divisor+2)^0,f,c
  2203  000CCE  1E0A               	comf	(___aodiv@divisor+1)^0,f,c
  2204  000CD0  6C09               	negf	___aodiv@divisor^0,c
  2205  000CD2  0E00               	movlw	0
  2206  000CD4  220A               	addwfc	(___aodiv@divisor+1)^0,f,c
  2207  000CD6  220B               	addwfc	(___aodiv@divisor+2)^0,f,c
  2208  000CD8  220C               	addwfc	(___aodiv@divisor+3)^0,f,c
  2209  000CDA  220D               	addwfc	(___aodiv@divisor+4)^0,f,c
  2210  000CDC  220E               	addwfc	(___aodiv@divisor+5)^0,f,c
  2211  000CDE  220F               	addwfc	(___aodiv@divisor+6)^0,f,c
  2212  000CE0  2210               	addwfc	(___aodiv@divisor+7)^0,f,c
  2213  000CE2  0E01               	movlw	1
  2214  000CE4  6E12               	movwf	___aodiv@sign^0,c
  2215  000CE6                     l1299:
  2216  000CE6  BE08               	btfsc	(___aodiv@dividend+7)^0,7,c
  2217  000CE8  EF7A  F006         	goto	u630
  2218  000CEC  EF78  F006         	goto	u631
  2219  000CF0                     u631:
  2220  000CF0  EF8C  F006         	goto	l1305
  2221  000CF4                     u630:
  2222  000CF4  1E08               	comf	(___aodiv@dividend+7)^0,f,c
  2223  000CF6  1E07               	comf	(___aodiv@dividend+6)^0,f,c
  2224  000CF8  1E06               	comf	(___aodiv@dividend+5)^0,f,c
  2225  000CFA  1E05               	comf	(___aodiv@dividend+4)^0,f,c
  2226  000CFC  1E04               	comf	(___aodiv@dividend+3)^0,f,c
  2227  000CFE  1E03               	comf	(___aodiv@dividend+2)^0,f,c
  2228  000D00  1E02               	comf	(___aodiv@dividend+1)^0,f,c
  2229  000D02  6C01               	negf	___aodiv@dividend^0,c
  2230  000D04  0E00               	movlw	0
  2231  000D06  2202               	addwfc	(___aodiv@dividend+1)^0,f,c
  2232  000D08  2203               	addwfc	(___aodiv@dividend+2)^0,f,c
  2233  000D0A  2204               	addwfc	(___aodiv@dividend+3)^0,f,c
  2234  000D0C  2205               	addwfc	(___aodiv@dividend+4)^0,f,c
  2235  000D0E  2206               	addwfc	(___aodiv@dividend+5)^0,f,c
  2236  000D10  2207               	addwfc	(___aodiv@dividend+6)^0,f,c
  2237  000D12  2208               	addwfc	(___aodiv@dividend+7)^0,f,c
  2238  000D14  0E01               	movlw	1
  2239  000D16  1A12               	xorwf	___aodiv@sign^0,f,c
  2240  000D18                     l1305:
  2241  000D18  EE20  F013         	lfsr	2,___aodiv@quotient
  2242  000D1C  0E07               	movlw	7
  2243  000D1E                     u641:
  2244  000D1E  6ADE               	clrf	postinc2,c
  2245  000D20  06E8               	decf	wreg,f,c
  2246  000D22  E2FD               	bc	u641
  2247  000D24  5009               	movf	___aodiv@divisor^0,w,c
  2248  000D26  100A               	iorwf	(___aodiv@divisor+1)^0,w,c
  2249  000D28  100B               	iorwf	(___aodiv@divisor+2)^0,w,c
  2250  000D2A  100C               	iorwf	(___aodiv@divisor+3)^0,w,c
  2251  000D2C  100D               	iorwf	(___aodiv@divisor+4)^0,w,c
  2252  000D2E  100E               	iorwf	(___aodiv@divisor+5)^0,w,c
  2253  000D30  100F               	iorwf	(___aodiv@divisor+6)^0,w,c
  2254  000D32  1010               	iorwf	(___aodiv@divisor+7)^0,w,c
  2255  000D34  B4D8               	btfsc	status,2,c
  2256  000D36  EF9F  F006         	goto	u651
  2257  000D3A  EFA1  F006         	goto	u650
  2258  000D3E                     u651:
  2259  000D3E  EFF3  F006         	goto	l1327
  2260  000D42                     u650:
  2261  000D42  0E01               	movlw	1
  2262  000D44  6E11               	movwf	___aodiv@counter^0,c
  2263  000D46  EFAF  F006         	goto	l1313
  2264  000D4A                     l1311:
  2265  000D4A  90D8               	bcf	status,0,c
  2266  000D4C  3609               	rlcf	___aodiv@divisor^0,f,c
  2267  000D4E  360A               	rlcf	(___aodiv@divisor+1)^0,f,c
  2268  000D50  360B               	rlcf	(___aodiv@divisor+2)^0,f,c
  2269  000D52  360C               	rlcf	(___aodiv@divisor+3)^0,f,c
  2270  000D54  360D               	rlcf	(___aodiv@divisor+4)^0,f,c
  2271  000D56  360E               	rlcf	(___aodiv@divisor+5)^0,f,c
  2272  000D58  360F               	rlcf	(___aodiv@divisor+6)^0,f,c
  2273  000D5A  3610               	rlcf	(___aodiv@divisor+7)^0,f,c
  2274  000D5C  2A11               	incf	___aodiv@counter^0,f,c
  2275  000D5E                     l1313:
  2276  000D5E  AE10               	btfss	(___aodiv@divisor+7)^0,7,c
  2277  000D60  EFB4  F006         	goto	u661
  2278  000D64  EFB6  F006         	goto	u660
  2279  000D68                     u661:
  2280  000D68  EFA5  F006         	goto	l1311
  2281  000D6C                     u660:
  2282  000D6C                     l1315:
  2283  000D6C  90D8               	bcf	status,0,c
  2284  000D6E  3613               	rlcf	___aodiv@quotient^0,f,c
  2285  000D70  3614               	rlcf	(___aodiv@quotient+1)^0,f,c
  2286  000D72  3615               	rlcf	(___aodiv@quotient+2)^0,f,c
  2287  000D74  3616               	rlcf	(___aodiv@quotient+3)^0,f,c
  2288  000D76  3617               	rlcf	(___aodiv@quotient+4)^0,f,c
  2289  000D78  3618               	rlcf	(___aodiv@quotient+5)^0,f,c
  2290  000D7A  3619               	rlcf	(___aodiv@quotient+6)^0,f,c
  2291  000D7C  361A               	rlcf	(___aodiv@quotient+7)^0,f,c
  2292  000D7E  5009               	movf	___aodiv@divisor^0,w,c
  2293  000D80  5C01               	subwf	___aodiv@dividend^0,w,c
  2294  000D82  500A               	movf	(___aodiv@divisor+1)^0,w,c
  2295  000D84  5802               	subwfb	(___aodiv@dividend+1)^0,w,c
  2296  000D86  500B               	movf	(___aodiv@divisor+2)^0,w,c
  2297  000D88  5803               	subwfb	(___aodiv@dividend+2)^0,w,c
  2298  000D8A  500C               	movf	(___aodiv@divisor+3)^0,w,c
  2299  000D8C  5804               	subwfb	(___aodiv@dividend+3)^0,w,c
  2300  000D8E  500D               	movf	(___aodiv@divisor+4)^0,w,c
  2301  000D90  5805               	subwfb	(___aodiv@dividend+4)^0,w,c
  2302  000D92  500E               	movf	(___aodiv@divisor+5)^0,w,c
  2303  000D94  5806               	subwfb	(___aodiv@dividend+5)^0,w,c
  2304  000D96  500F               	movf	(___aodiv@divisor+6)^0,w,c
  2305  000D98  5807               	subwfb	(___aodiv@dividend+6)^0,w,c
  2306  000D9A  5010               	movf	(___aodiv@divisor+7)^0,w,c
  2307  000D9C  5808               	subwfb	(___aodiv@dividend+7)^0,w,c
  2308  000D9E  A0D8               	btfss	status,0,c
  2309  000DA0  EFD4  F006         	goto	u671
  2310  000DA4  EFD6  F006         	goto	u670
  2311  000DA8                     u671:
  2312  000DA8  EFE7  F006         	goto	l1323
  2313  000DAC                     u670:
  2314  000DAC  5009               	movf	___aodiv@divisor^0,w,c
  2315  000DAE  5E01               	subwf	___aodiv@dividend^0,f,c
  2316  000DB0  500A               	movf	(___aodiv@divisor+1)^0,w,c
  2317  000DB2  5A02               	subwfb	(___aodiv@dividend+1)^0,f,c
  2318  000DB4  500B               	movf	(___aodiv@divisor+2)^0,w,c
  2319  000DB6  5A03               	subwfb	(___aodiv@dividend+2)^0,f,c
  2320  000DB8  500C               	movf	(___aodiv@divisor+3)^0,w,c
  2321  000DBA  5A04               	subwfb	(___aodiv@dividend+3)^0,f,c
  2322  000DBC  500D               	movf	(___aodiv@divisor+4)^0,w,c
  2323  000DBE  5A05               	subwfb	(___aodiv@dividend+4)^0,f,c
  2324  000DC0  500E               	movf	(___aodiv@divisor+5)^0,w,c
  2325  000DC2  5A06               	subwfb	(___aodiv@dividend+5)^0,f,c
  2326  000DC4  500F               	movf	(___aodiv@divisor+6)^0,w,c
  2327  000DC6  5A07               	subwfb	(___aodiv@dividend+6)^0,f,c
  2328  000DC8  5010               	movf	(___aodiv@divisor+7)^0,w,c
  2329  000DCA  5A08               	subwfb	(___aodiv@dividend+7)^0,f,c
  2330  000DCC  8013               	bsf	___aodiv@quotient^0,0,c
  2331  000DCE                     l1323:
  2332  000DCE  90D8               	bcf	status,0,c
  2333  000DD0  3210               	rrcf	(___aodiv@divisor+7)^0,f,c
  2334  000DD2  320F               	rrcf	(___aodiv@divisor+6)^0,f,c
  2335  000DD4  320E               	rrcf	(___aodiv@divisor+5)^0,f,c
  2336  000DD6  320D               	rrcf	(___aodiv@divisor+4)^0,f,c
  2337  000DD8  320C               	rrcf	(___aodiv@divisor+3)^0,f,c
  2338  000DDA  320B               	rrcf	(___aodiv@divisor+2)^0,f,c
  2339  000DDC  320A               	rrcf	(___aodiv@divisor+1)^0,f,c
  2340  000DDE  3209               	rrcf	___aodiv@divisor^0,f,c
  2341  000DE0  2E11               	decfsz	___aodiv@counter^0,f,c
  2342  000DE2  EFB6  F006         	goto	l1315
  2343  000DE6                     l1327:
  2344  000DE6  5012               	movf	___aodiv@sign^0,w,c
  2345  000DE8  B4D8               	btfsc	status,2,c
  2346  000DEA  EFF9  F006         	goto	u681
  2347  000DEE  EFFB  F006         	goto	u680
  2348  000DF2                     u681:
  2349  000DF2  EF0B  F007         	goto	l1331
  2350  000DF6                     u680:
  2351  000DF6  1E1A               	comf	(___aodiv@quotient+7)^0,f,c
  2352  000DF8  1E19               	comf	(___aodiv@quotient+6)^0,f,c
  2353  000DFA  1E18               	comf	(___aodiv@quotient+5)^0,f,c
  2354  000DFC  1E17               	comf	(___aodiv@quotient+4)^0,f,c
  2355  000DFE  1E16               	comf	(___aodiv@quotient+3)^0,f,c
  2356  000E00  1E15               	comf	(___aodiv@quotient+2)^0,f,c
  2357  000E02  1E14               	comf	(___aodiv@quotient+1)^0,f,c
  2358  000E04  6C13               	negf	___aodiv@quotient^0,c
  2359  000E06  0E00               	movlw	0
  2360  000E08  2214               	addwfc	(___aodiv@quotient+1)^0,f,c
  2361  000E0A  2215               	addwfc	(___aodiv@quotient+2)^0,f,c
  2362  000E0C  2216               	addwfc	(___aodiv@quotient+3)^0,f,c
  2363  000E0E  2217               	addwfc	(___aodiv@quotient+4)^0,f,c
  2364  000E10  2218               	addwfc	(___aodiv@quotient+5)^0,f,c
  2365  000E12  2219               	addwfc	(___aodiv@quotient+6)^0,f,c
  2366  000E14  221A               	addwfc	(___aodiv@quotient+7)^0,f,c
  2367  000E16                     l1331:
  2368  000E16  C013  F001         	movff	___aodiv@quotient,?___aodiv
  2369  000E1A  C014  F002         	movff	___aodiv@quotient+1,?___aodiv+1
  2370  000E1E  C015  F003         	movff	___aodiv@quotient+2,?___aodiv+2
  2371  000E22  C016  F004         	movff	___aodiv@quotient+3,?___aodiv+3
  2372  000E26  C017  F005         	movff	___aodiv@quotient+4,?___aodiv+4
  2373  000E2A  C018  F006         	movff	___aodiv@quotient+5,?___aodiv+5
  2374  000E2E  C019  F007         	movff	___aodiv@quotient+6,?___aodiv+6
  2375  000E32  C01A  F008         	movff	___aodiv@quotient+7,?___aodiv+7
  2376  000E36  0012               	return		;funcret
  2377  000E38                     __end_of___aodiv:
  2378                           	opt callstack 0
  2379                           
  2380 ;; *************** function _inicializa_lcd *****************
  2381 ;; Defined at:
  2382 ;;		line 50 in file "lcd.c"
  2383 ;; Parameters:    Size  Location     Type
  2384 ;;		None
  2385 ;; Auto vars:     Size  Location     Type
  2386 ;;		None
  2387 ;; Return value:  Size  Location     Type
  2388 ;;                  1    wreg      void 
  2389 ;; Registers used:
  2390 ;;		wreg, status,2, status,0, cstack
  2391 ;; Tracked objects:
  2392 ;;		On entry : 0/0
  2393 ;;		On exit  : 0/0
  2394 ;;		Unchanged: 0/0
  2395 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2396 ;;      Params:         0       0       0       0       0       0       0       0       0
  2397 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2398 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2399 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2400 ;;Total ram usage:        1 bytes
  2401 ;; Hardware stack levels used:    1
  2402 ;; Hardware stack levels required when called:    3
  2403 ;; This function calls:
  2404 ;;		_envia_byte_lcd
  2405 ;;		_envia_nibble_lcd
  2406 ;; This function is called by:
  2407 ;;		_main
  2408 ;; This function uses a non-reentrant model
  2409 ;;
  2410                           
  2411                           	psect	text14
  2412  001180                     __ptext14:
  2413                           	opt callstack 0
  2414  001180                     _inicializa_lcd:
  2415                           	opt callstack 27
  2416  001180                     
  2417                           ;lcd.c: 52:  PORTDbits.RD1 = 0;
  2418  001180  9283               	bcf	131,1,c	;volatile
  2419                           
  2420                           ;lcd.c: 53:  PORTDbits.RD4 = 0;
  2421  001182  9883               	bcf	131,4,c	;volatile
  2422                           
  2423                           ;lcd.c: 54:  PORTDbits.RD5 = 0;
  2424  001184  9A83               	bcf	131,5,c	;volatile
  2425                           
  2426                           ;lcd.c: 55:  PORTDbits.RD6 = 0;
  2427  001186  9C83               	bcf	131,6,c	;volatile
  2428                           
  2429                           ;lcd.c: 56:  PORTDbits.RD7 = 0;
  2430  001188  9E83               	bcf	131,7,c	;volatile
  2431  00118A                     
  2432                           ;lcd.c: 58:  _delay((unsigned long)((50)*(4000000/4000.0)));
  2433  00118A  0E41               	movlw	65
  2434  00118C  6E05               	movwf	??_inicializa_lcd^0,c
  2435  00118E  0EEE               	movlw	238
  2436  001190                     u1007:
  2437  001190  2EE8               	decfsz	wreg,f,c
  2438  001192  D7FE               	bra	u1007
  2439  001194  2E05               	decfsz	??_inicializa_lcd^0,f,c
  2440  001196  D7FC               	bra	u1007
  2441  001198  D000               	nop2	
  2442  00119A                     
  2443                           ;lcd.c: 59:  envia_nibble_lcd(0x03);
  2444  00119A  0E03               	movlw	3
  2445  00119C  EC7C  F008         	call	_envia_nibble_lcd
  2446  0011A0                     
  2447                           ;lcd.c: 60:  _delay((unsigned long)((4)*(4000000/4000.0)));
  2448  0011A0  0E06               	movlw	6
  2449  0011A2  6E05               	movwf	??_inicializa_lcd^0,c
  2450  0011A4  0E30               	movlw	48
  2451  0011A6                     u1017:
  2452  0011A6  2EE8               	decfsz	wreg,f,c
  2453  0011A8  D7FE               	bra	u1017
  2454  0011AA  2E05               	decfsz	??_inicializa_lcd^0,f,c
  2455  0011AC  D7FC               	bra	u1017
  2456  0011AE  D000               	nop2	
  2457                           
  2458                           ;lcd.c: 61:  envia_nibble_lcd(0x03);
  2459  0011B0  0E03               	movlw	3
  2460  0011B2  EC7C  F008         	call	_envia_nibble_lcd
  2461  0011B6                     
  2462                           ;lcd.c: 62:  _delay((unsigned long)((100)*(4000000/4000000.0)));
  2463  0011B6  0E21               	movlw	33
  2464  0011B8                     u1027:
  2465  0011B8  2EE8               	decfsz	wreg,f,c
  2466  0011BA  D7FE               	bra	u1027
  2467  0011BC  F000               	nop	
  2468  0011BE                     
  2469                           ;lcd.c: 63:  envia_nibble_lcd(0x03);
  2470  0011BE  0E03               	movlw	3
  2471  0011C0  EC7C  F008         	call	_envia_nibble_lcd
  2472  0011C4                     
  2473                           ;lcd.c: 65:  envia_nibble_lcd(0x02);
  2474  0011C4  0E02               	movlw	2
  2475  0011C6  EC7C  F008         	call	_envia_nibble_lcd
  2476  0011CA                     
  2477                           ;lcd.c: 67:  envia_byte_lcd(0,0x01);
  2478  0011CA  0E01               	movlw	1
  2479  0011CC  6E03               	movwf	envia_byte_lcd@dado^0,c
  2480  0011CE  0E00               	movlw	0
  2481  0011D0  EC1A  F00A         	call	_envia_byte_lcd
  2482                           
  2483                           ;lcd.c: 68:  _delay((unsigned long)((2)*(4000000/4000.0)));
  2484  0011D4  0E03               	movlw	3
  2485  0011D6  6E05               	movwf	??_inicializa_lcd^0,c
  2486  0011D8  0E98               	movlw	152
  2487  0011DA                     u1037:
  2488  0011DA  2EE8               	decfsz	wreg,f,c
  2489  0011DC  D7FE               	bra	u1037
  2490  0011DE  2E05               	decfsz	??_inicializa_lcd^0,f,c
  2491  0011E0  D7FC               	bra	u1037
  2492  0011E2                     
  2493                           ;lcd.c: 70:  envia_byte_lcd(0,0x28);
  2494  0011E2  0E28               	movlw	40
  2495  0011E4  6E03               	movwf	envia_byte_lcd@dado^0,c
  2496  0011E6  0E00               	movlw	0
  2497  0011E8  EC1A  F00A         	call	_envia_byte_lcd
  2498  0011EC                     
  2499                           ;lcd.c: 72:  envia_byte_lcd(0,0x0c);
  2500  0011EC  0E0C               	movlw	12
  2501  0011EE  6E03               	movwf	envia_byte_lcd@dado^0,c
  2502  0011F0  0E00               	movlw	0
  2503  0011F2  EC1A  F00A         	call	_envia_byte_lcd
  2504  0011F6                     
  2505                           ;lcd.c: 74:  envia_byte_lcd(0,0x06);
  2506  0011F6  0E06               	movlw	6
  2507  0011F8  6E03               	movwf	envia_byte_lcd@dado^0,c
  2508  0011FA  0E00               	movlw	0
  2509  0011FC  EC1A  F00A         	call	_envia_byte_lcd
  2510  001200  0012               	return		;funcret
  2511  001202                     __end_of_inicializa_lcd:
  2512                           	opt callstack 0
  2513                           
  2514 ;; *************** function _caracter_inicio *****************
  2515 ;; Defined at:
  2516 ;;		line 80 in file "lcd.c"
  2517 ;; Parameters:    Size  Location     Type
  2518 ;;  linha           1    wreg     unsigned char 
  2519 ;;  coluna          1    4[COMRAM] unsigned char 
  2520 ;; Auto vars:     Size  Location     Type
  2521 ;;  linha           1    5[COMRAM] unsigned char 
  2522 ;;  posicao         1    6[COMRAM] unsigned char 
  2523 ;; Return value:  Size  Location     Type
  2524 ;;                  1    wreg      void 
  2525 ;; Registers used:
  2526 ;;		wreg, status,2, status,0, cstack
  2527 ;; Tracked objects:
  2528 ;;		On entry : 0/0
  2529 ;;		On exit  : 0/0
  2530 ;;		Unchanged: 0/0
  2531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2532 ;;      Params:         1       0       0       0       0       0       0       0       0
  2533 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2534 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2535 ;;      Totals:         3       0       0       0       0       0       0       0       0
  2536 ;;Total ram usage:        3 bytes
  2537 ;; Hardware stack levels used:    1
  2538 ;; Hardware stack levels required when called:    3
  2539 ;; This function calls:
  2540 ;;		_envia_byte_lcd
  2541 ;; This function is called by:
  2542 ;;		_main
  2543 ;; This function uses a non-reentrant model
  2544 ;;
  2545                           
  2546                           	psect	text15
  2547  001320                     __ptext15:
  2548                           	opt callstack 0
  2549  001320                     _caracter_inicio:
  2550                           	opt callstack 27
  2551                           
  2552                           ;incstack = 0
  2553                           ;caracter_inicio@linha stored from wreg
  2554  001320  6E06               	movwf	caracter_inicio@linha^0,c
  2555  001322                     
  2556                           ;lcd.c: 80:  void caracter_inicio(char linha,char coluna);lcd.c: 81: {;lcd.c: 82:  char 
      +                          posicao=0;
  2557  001322  0E00               	movlw	0
  2558  001324  6E07               	movwf	caracter_inicio@posicao^0,c
  2559  001326                     
  2560                           ;lcd.c: 83:  if(linha == 1)
  2561  001326  0406               	decf	caracter_inicio@linha^0,w,c
  2562  001328  A4D8               	btfss	status,2,c
  2563  00132A  EF99  F009         	goto	u951
  2564  00132E  EF9B  F009         	goto	u950
  2565  001332                     u951:
  2566  001332  EF9D  F009         	goto	l1511
  2567  001336                     u950:
  2568  001336                     
  2569                           ;lcd.c: 84: {;lcd.c: 85:  posicao=0x80;
  2570  001336  0E80               	movlw	128
  2571  001338  6E07               	movwf	caracter_inicio@posicao^0,c
  2572  00133A                     l1511:
  2573                           
  2574                           ;lcd.c: 87:  if(linha == 2)
  2575  00133A  0E02               	movlw	2
  2576  00133C  1806               	xorwf	caracter_inicio@linha^0,w,c
  2577  00133E  A4D8               	btfss	status,2,c
  2578  001340  EFA4  F009         	goto	u961
  2579  001344  EFA6  F009         	goto	u960
  2580  001348                     u961:
  2581  001348  EFA8  F009         	goto	l1515
  2582  00134C                     u960:
  2583  00134C                     
  2584                           ;lcd.c: 88: {;lcd.c: 89:  posicao=0xc0;
  2585  00134C  0EC0               	movlw	192
  2586  00134E  6E07               	movwf	caracter_inicio@posicao^0,c
  2587  001350                     l1515:
  2588                           
  2589                           ;lcd.c: 92: posicao=posicao+coluna;
  2590  001350  5007               	movf	caracter_inicio@posicao^0,w,c
  2591  001352  2405               	addwf	caracter_inicio@coluna^0,w,c
  2592  001354  6E07               	movwf	caracter_inicio@posicao^0,c
  2593  001356                     
  2594                           ;lcd.c: 94: envia_byte_lcd(0,posicao);
  2595  001356  C007  F003         	movff	caracter_inicio@posicao,envia_byte_lcd@dado
  2596  00135A  0E00               	movlw	0
  2597  00135C  EC1A  F00A         	call	_envia_byte_lcd
  2598  001360  0012               	return		;funcret
  2599  001362                     __end_of_caracter_inicio:
  2600                           	opt callstack 0
  2601                           
  2602 ;; *************** function _envia_byte_lcd *****************
  2603 ;; Defined at:
  2604 ;;		line 29 in file "lcd.c"
  2605 ;; Parameters:    Size  Location     Type
  2606 ;;  endereco        1    wreg     unsigned char 
  2607 ;;  dado            1    2[COMRAM] unsigned char 
  2608 ;; Auto vars:     Size  Location     Type
  2609 ;;  endereco        1    3[COMRAM] unsigned char 
  2610 ;; Return value:  Size  Location     Type
  2611 ;;                  1    wreg      void 
  2612 ;; Registers used:
  2613 ;;		wreg, status,2, status,0, cstack
  2614 ;; Tracked objects:
  2615 ;;		On entry : 0/0
  2616 ;;		On exit  : 0/0
  2617 ;;		Unchanged: 0/0
  2618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2619 ;;      Params:         1       0       0       0       0       0       0       0       0
  2620 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2621 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2622 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2623 ;;Total ram usage:        2 bytes
  2624 ;; Hardware stack levels used:    1
  2625 ;; Hardware stack levels required when called:    2
  2626 ;; This function calls:
  2627 ;;		_envia_nibble_lcd
  2628 ;; This function is called by:
  2629 ;;		_escreve_lcd
  2630 ;;		_inicializa_lcd
  2631 ;;		_caracter_inicio
  2632 ;;		_limpa_lcd
  2633 ;; This function uses a non-reentrant model
  2634 ;;
  2635                           
  2636                           	psect	text16
  2637  001434                     __ptext16:
  2638                           	opt callstack 0
  2639  001434                     _envia_byte_lcd:
  2640                           	opt callstack 22
  2641                           
  2642                           ;incstack = 0
  2643                           ;envia_byte_lcd@endereco stored from wreg
  2644  001434  6E04               	movwf	envia_byte_lcd@endereco^0,c
  2645  001436                     
  2646                           ;lcd.c: 29: void envia_byte_lcd(char endereco,char dado);lcd.c: 30: {;lcd.c: 31:  PORTDb
      +                          its.RD0 = endereco;
  2647  001436  B004               	btfsc	envia_byte_lcd@endereco^0,0,c
  2648  001438  D002               	bra	u505
  2649  00143A  9083               	bcf	131,0,c	;volatile
  2650  00143C  D001               	bra	u506
  2651  00143E                     u505:
  2652  00143E  8083               	bsf	131,0,c	;volatile
  2653  001440                     u506:
  2654  001440                     
  2655                           ;lcd.c: 32:  _delay((unsigned long)((5)*(4000000/4000000.0)));
  2656  001440  D000               	nop2		;2 cycle nop
  2657  001442  D000               	nop2		;2 cycle nop
  2658  001444  F000               	nop	
  2659  001446                     
  2660                           ;lcd.c: 33:  envia_nibble_lcd(dado>>4);
  2661  001446  3803               	swapf	envia_byte_lcd@dado^0,w,c
  2662  001448  0B0F               	andlw	15
  2663  00144A  EC7C  F008         	call	_envia_nibble_lcd
  2664  00144E                     
  2665                           ;lcd.c: 34:  envia_nibble_lcd(dado & 0x0f);
  2666  00144E  5003               	movf	envia_byte_lcd@dado^0,w,c
  2667  001450  0B0F               	andlw	15
  2668  001452  EC7C  F008         	call	_envia_nibble_lcd
  2669  001456  0012               	return		;funcret
  2670  001458                     __end_of_envia_byte_lcd:
  2671                           	opt callstack 0
  2672                           
  2673 ;; *************** function _envia_nibble_lcd *****************
  2674 ;; Defined at:
  2675 ;;		line 11 in file "lcd.c"
  2676 ;; Parameters:    Size  Location     Type
  2677 ;;  dado            1    wreg     unsigned char 
  2678 ;; Auto vars:     Size  Location     Type
  2679 ;;  dado            1    1[COMRAM] unsigned char 
  2680 ;; Return value:  Size  Location     Type
  2681 ;;                  1    wreg      void 
  2682 ;; Registers used:
  2683 ;;		wreg, status,2, status,0
  2684 ;; Tracked objects:
  2685 ;;		On entry : 0/0
  2686 ;;		On exit  : 0/0
  2687 ;;		Unchanged: 0/0
  2688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2689 ;;      Params:         0       0       0       0       0       0       0       0       0
  2690 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2691 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2692 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2693 ;;Total ram usage:        2 bytes
  2694 ;; Hardware stack levels used:    1
  2695 ;; Hardware stack levels required when called:    1
  2696 ;; This function calls:
  2697 ;;		Nothing
  2698 ;; This function is called by:
  2699 ;;		_envia_byte_lcd
  2700 ;;		_inicializa_lcd
  2701 ;; This function uses a non-reentrant model
  2702 ;;
  2703                           
  2704                           	psect	text17
  2705  0010F8                     __ptext17:
  2706                           	opt callstack 0
  2707  0010F8                     _envia_nibble_lcd:
  2708                           	opt callstack 22
  2709                           
  2710                           ;incstack = 0
  2711                           ;envia_nibble_lcd@dado stored from wreg
  2712  0010F8  6E02               	movwf	envia_nibble_lcd@dado^0,c
  2713  0010FA                     
  2714                           ;lcd.c: 11: void envia_nibble_lcd(char dado);lcd.c: 12: {;lcd.c: 13:   PORTDbits.RD1 = 1
      +                          ;
  2715  0010FA  8283               	bsf	131,1,c	;volatile
  2716  0010FC                     
  2717                           ;lcd.c: 14:   PORTDbits.RD4 = dado & 0x01;
  2718  0010FC  C002  F001         	movff	envia_nibble_lcd@dado,??_envia_nibble_lcd
  2719  001100  0E01               	movlw	1
  2720  001102  1601               	andwf	??_envia_nibble_lcd^0,f,c
  2721  001104  3A01               	swapf	??_envia_nibble_lcd^0,f,c
  2722  001106  5083               	movf	131,w,c	;volatile
  2723  001108  1801               	xorwf	??_envia_nibble_lcd^0,w,c
  2724  00110A  0BEF               	andlw	-17
  2725  00110C  1801               	xorwf	??_envia_nibble_lcd^0,w,c
  2726  00110E  6E83               	movwf	131,c	;volatile
  2727                           
  2728                           ;lcd.c: 15:   PORTDbits.RD5 = (dado >> 1) & 0x01;
  2729  001110  C002  F001         	movff	envia_nibble_lcd@dado,??_envia_nibble_lcd
  2730  001114  90D8               	bcf	status,0,c
  2731  001116  3201               	rrcf	??_envia_nibble_lcd^0,f,c
  2732  001118  0E01               	movlw	1
  2733  00111A  1601               	andwf	??_envia_nibble_lcd^0,f,c
  2734  00111C  3A01               	swapf	??_envia_nibble_lcd^0,f,c
  2735  00111E  4601               	rlncf	??_envia_nibble_lcd^0,f,c
  2736  001120  5083               	movf	131,w,c	;volatile
  2737  001122  1801               	xorwf	??_envia_nibble_lcd^0,w,c
  2738  001124  0BDF               	andlw	-33
  2739  001126  1801               	xorwf	??_envia_nibble_lcd^0,w,c
  2740  001128  6E83               	movwf	131,c	;volatile
  2741                           
  2742                           ;lcd.c: 16:   PORTDbits.RD6 = (dado >> 2) & 0x01;
  2743  00112A  C002  F001         	movff	envia_nibble_lcd@dado,??_envia_nibble_lcd
  2744  00112E  90D8               	bcf	status,0,c
  2745  001130  3201               	rrcf	??_envia_nibble_lcd^0,f,c
  2746  001132  90D8               	bcf	status,0,c
  2747  001134  3201               	rrcf	??_envia_nibble_lcd^0,f,c
  2748  001136  0E01               	movlw	1
  2749  001138  1601               	andwf	??_envia_nibble_lcd^0,f,c
  2750  00113A  3A01               	swapf	??_envia_nibble_lcd^0,f,c
  2751  00113C  4601               	rlncf	??_envia_nibble_lcd^0,f,c
  2752  00113E  4601               	rlncf	??_envia_nibble_lcd^0,f,c
  2753  001140  5083               	movf	131,w,c	;volatile
  2754  001142  1801               	xorwf	??_envia_nibble_lcd^0,w,c
  2755  001144  0BBF               	andlw	-65
  2756  001146  1801               	xorwf	??_envia_nibble_lcd^0,w,c
  2757  001148  6E83               	movwf	131,c	;volatile
  2758                           
  2759                           ;lcd.c: 17:   PORTDbits.RD7 = (dado >> 3) & 0x01;
  2760  00114A  C002  F001         	movff	envia_nibble_lcd@dado,??_envia_nibble_lcd
  2761  00114E  90D8               	bcf	status,0,c
  2762  001150  3201               	rrcf	??_envia_nibble_lcd^0,f,c
  2763  001152  90D8               	bcf	status,0,c
  2764  001154  3201               	rrcf	??_envia_nibble_lcd^0,f,c
  2765  001156  90D8               	bcf	status,0,c
  2766  001158  3201               	rrcf	??_envia_nibble_lcd^0,f,c
  2767  00115A  0E01               	movlw	1
  2768  00115C  1601               	andwf	??_envia_nibble_lcd^0,f,c
  2769  00115E  3201               	rrcf	??_envia_nibble_lcd^0,f,c
  2770  001160  3201               	rrcf	??_envia_nibble_lcd^0,f,c
  2771  001162  5083               	movf	131,w,c	;volatile
  2772  001164  1801               	xorwf	??_envia_nibble_lcd^0,w,c
  2773  001166  0B7F               	andlw	-129
  2774  001168  1801               	xorwf	??_envia_nibble_lcd^0,w,c
  2775  00116A  6E83               	movwf	131,c	;volatile
  2776  00116C                     
  2777                           ;lcd.c: 20:   _delay((unsigned long)((50)*(4000000/4000000.0)));
  2778  00116C  0E10               	movlw	16
  2779  00116E                     u1047:
  2780  00116E  2EE8               	decfsz	wreg,f,c
  2781  001170  D7FE               	bra	u1047
  2782  001172  D000               	nop2	
  2783  001174                     
  2784                           ;lcd.c: 21:   PORTDbits.RD1 = 0;
  2785  001174  9283               	bcf	131,1,c	;volatile
  2786  001176                     
  2787                           ;lcd.c: 22:   _delay((unsigned long)((50)*(4000000/4000000.0)));
  2788  001176  0E10               	movlw	16
  2789  001178                     u1057:
  2790  001178  2EE8               	decfsz	wreg,f,c
  2791  00117A  D7FE               	bra	u1057
  2792  00117C  D000               	nop2	
  2793  00117E  0012               	return		;funcret
  2794  001180                     __end_of_envia_nibble_lcd:
  2795                           	opt callstack 0
  2796                           
  2797 ;; *************** function _ISR *****************
  2798 ;; Defined at:
  2799 ;;		line 48 in file "main.c"
  2800 ;; Parameters:    Size  Location     Type
  2801 ;;		None
  2802 ;; Auto vars:     Size  Location     Type
  2803 ;;		None
  2804 ;; Return value:  Size  Location     Type
  2805 ;;                  1    wreg      void 
  2806 ;; Registers used:
  2807 ;;		wreg, status,2
  2808 ;; Tracked objects:
  2809 ;;		On entry : 0/0
  2810 ;;		On exit  : 0/0
  2811 ;;		Unchanged: 0/0
  2812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2813 ;;      Params:         0       0       0       0       0       0       0       0       0
  2814 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2815 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2816 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2817 ;;Total ram usage:        0 bytes
  2818 ;; Hardware stack levels used:    1
  2819 ;; This function calls:
  2820 ;;		Nothing
  2821 ;; This function is called by:
  2822 ;;		Interrupt level 2
  2823 ;; This function uses a non-reentrant model
  2824 ;;
  2825                           
  2826                           	psect	intcode
  2827  000008                     __pintcode:
  2828                           	opt callstack 0
  2829  000008                     _ISR:
  2830                           	opt callstack 19
  2831                           
  2832                           ;incstack = 0
  2833  000008  825F               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  2834  00000A  EDEC  F009         	call	int_func,f	;refresh shadow registers
  2835                           
  2836                           	psect	intcode_body
  2837  0013D8                     __pintcode_body:
  2838                           	opt callstack 19
  2839  0013D8                     int_func:
  2840                           	opt callstack 19
  2841  0013D8  0006               	pop		; remove dummy address from shadow register refresh
  2842  0013DA                     
  2843                           ;main.c: 49:   if(INT0IF){
  2844  0013DA  A2F2               	btfss	4082,1,c	;volatile
  2845  0013DC  EFF2  F009         	goto	i2u97_41
  2846  0013E0  EFF4  F009         	goto	i2u97_40
  2847  0013E4                     i2u97_41:
  2848  0013E4  EF04  F00A         	goto	i2l45
  2849  0013E8                     i2u97_40:
  2850  0013E8                     
  2851                           ;main.c: 50:      INT0IF = 0;
  2852  0013E8  92F2               	bcf	4082,1,c	;volatile
  2853                           
  2854                           ;main.c: 51:      if (INTEDG0){
  2855  0013EA  ACF1               	btfss	4081,6,c	;volatile
  2856  0013EC  EFFA  F009         	goto	i2u98_41
  2857  0013F0  EFFC  F009         	goto	i2u98_40
  2858  0013F4                     i2u98_41:
  2859  0013F4  EF01  F00A         	goto	i2l43
  2860  0013F8                     i2u98_40:
  2861  0013F8                     
  2862                           ;main.c: 52:       TMR2 = 0;
  2863  0013F8  0E00               	movlw	0
  2864  0013FA  6ECC               	movwf	204,c	;volatile
  2865  0013FC                     
  2866                           ;main.c: 53:       INTEDG0 = 0;
  2867  0013FC  9CF1               	bcf	4081,6,c	;volatile
  2868                           
  2869                           ;main.c: 54:      } else {
  2870  0013FE  EF04  F00A         	goto	i2l45
  2871  001402                     i2l43:
  2872                           
  2873                           ;main.c: 55:       cont = TMR2;
  2874  001402  CFCC F068          	movff	4044,_cont	;volatile
  2875                           
  2876                           ;main.c: 56:       INTEDG0 = 1;
  2877  001406  8CF1               	bsf	4081,6,c	;volatile
  2878  001408                     i2l45:
  2879  001408  925F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  2880  00140A  0011               	retfie		f
  2881  00140C                     __end_of_ISR:
  2882                           	opt callstack 0
  2883                           
  2884                           	psect	rparam
  2885  0000                     
  2886                           	psect	temp
  2887  00005F                     btemp:
  2888                           	opt callstack 0
  2889  00005F                     	ds	1
  2890  0000                     int$flags	set	btemp
  2891  0000                     wtemp8	set	btemp+1
  2892  0000                     ttemp5	set	btemp+1
  2893  0000                     ttemp6	set	btemp+4
  2894  0000                     ttemp7	set	btemp+8
  2895                           tosu	equ	0xFFF
  2896                           tosh	equ	0xFFE
  2897                           tosl	equ	0xFFD
  2898                           stkptr	equ	0xFFC
  2899                           pclatu	equ	0xFFB
  2900                           pclath	equ	0xFFA
  2901                           pcl	equ	0xFF9
  2902                           tblptru	equ	0xFF8
  2903                           tblptrh	equ	0xFF7
  2904                           tblptrl	equ	0xFF6
  2905                           tablat	equ	0xFF5
  2906                           prodh	equ	0xFF4
  2907                           prodl	equ	0xFF3
  2908                           indf0	equ	0xFEF
  2909                           postinc0	equ	0xFEE
  2910                           postdec0	equ	0xFED
  2911                           preinc0	equ	0xFEC
  2912                           plusw0	equ	0xFEB
  2913                           fsr0h	equ	0xFEA
  2914                           fsr0l	equ	0xFE9
  2915                           wreg	equ	0xFE8
  2916                           indf1	equ	0xFE7
  2917                           postinc1	equ	0xFE6
  2918                           postdec1	equ	0xFE5
  2919                           preinc1	equ	0xFE4
  2920                           plusw1	equ	0xFE3
  2921                           fsr1h	equ	0xFE2
  2922                           fsr1l	equ	0xFE1
  2923                           bsr	equ	0xFE0
  2924                           indf2	equ	0xFDF
  2925                           postinc2	equ	0xFDE
  2926                           postdec2	equ	0xFDD
  2927                           preinc2	equ	0xFDC
  2928                           plusw2	equ	0xFDB
  2929                           fsr2h	equ	0xFDA
  2930                           fsr2l	equ	0xFD9
  2931                           status	equ	0xFD8


Data Sizes:
    Strings     24
    Constant    0
    Data        0
    BSS         41
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     94      94
    BANK0           160      8      49
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    printf@fmt	PTR const unsigned char  size(2) Largest target is 14
		 -> STR_2(CODE[14]), STR_1(CODE[10]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    S811_IO_FILE$buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp.buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> printf@ap(BANK0[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 14
		 -> STR_2(CODE[14]), STR_1(CODE[10]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 14
		 -> STR_2(CODE[14]), STR_1(CODE[10]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> printf@ap(BANK0[2]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 


Critical Paths under _main in COMRAM

    _printf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _fputc->_putch
    _putch->_escreve_lcd
    _escreve_lcd->_envia_byte_lcd
    _abs->___aomod
    _inicializa_lcd->_envia_byte_lcd
    _caracter_inicio->_envia_byte_lcd
    _envia_byte_lcd->_envia_nibble_lcd

Critical Paths under _ISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_printf

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   10029
                                             93 COMRAM     1     1      0
                    _caracter_inicio
                     _inicializa_lcd
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                               8     4      4    8303
                                              0 BANK0      8     4      4
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     2      6    8097
                                             85 COMRAM     8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           42    36      6    7743
                                             69 COMRAM    16    10      6
                               _dtoa
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                36    26     10    5686
                                             33 COMRAM    36    26     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                 11     5      6    4037
                                             22 COMRAM    11     5      6
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (6) _strlen                                               4     2      2     166
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     3      4    1899
                                             15 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                9     5      4    1498
                                              6 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0     730
                                              5 COMRAM     1     1      0
                        _escreve_lcd
 ---------------------------------------------------------------------------------
 (6) _escreve_lcd                                          1     1      0     708
                                              4 COMRAM     1     1      0
                     _envia_byte_lcd
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     142
                                             18 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___aomod                                             18     2     16     448
                                              0 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (5) ___aodiv                                             26    10     16     452
                                              0 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (1) _inicializa_lcd                                       1     1      0     774
                                              4 COMRAM     1     1      0
                     _envia_byte_lcd
                   _envia_nibble_lcd
 ---------------------------------------------------------------------------------
 (1) _caracter_inicio                                      3     2      1     952
                                              4 COMRAM     3     2      1
                     _envia_byte_lcd
 ---------------------------------------------------------------------------------
 (7) _envia_byte_lcd                                       2     1      1     686
                                              2 COMRAM     2     1      1
                   _envia_nibble_lcd
 ---------------------------------------------------------------------------------
 (8) _envia_nibble_lcd                                     2     2      0      88
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (12) _ISR                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _caracter_inicio
     _envia_byte_lcd
       _envia_nibble_lcd
   _inicializa_lcd
     _envia_byte_lcd
       _envia_nibble_lcd
     _envia_nibble_lcd
   _printf
     _vfprintf
       _vfpfcnvrt
         _dtoa
           ___aodiv
           ___aomod
           _abs
             ___aomod (ARG)
           _pad
             _fputc
               _putch
                 _escreve_lcd
                   _envia_byte_lcd
                     _envia_nibble_lcd
             _fputs
               _fputc
                 _putch
                   _escreve_lcd
                     _envia_byte_lcd
                       _envia_nibble_lcd
             _strlen
         _fputc
           _putch
             _escreve_lcd
               _envia_byte_lcd
                 _envia_nibble_lcd

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      8      31       5       30.6%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     5E      5E       1      100.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      8F      20        0.0%
DATA                 0      0      8F       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Tue Jul 19 20:29:42 2022

                       l27 148C                         l52 117E                         l55 1456  
                       l64 1200                         l58 1482                         l69 1360  
                       l96 0FE2                         l99 1024                        l101 1060  
                      l107 08BA                        l140 12D2                        l109 08C2  
                      l141 12DA                        l134 0CAE                        l127 0AFA  
                      l271 0F9A                        l258 0E36                        l822 13A0  
                      l834 10F6                        l842 131E                        l819 1398  
                      l855 13D6                        l849 1432                        u510 1074  
                      u511 1070                        u520 1086                        u600 1034  
                      u505 143E                        u521 1082                        u601 1030  
                      u506 1440                        u610 137C                        u530 10AE  
                      u611 1378                        u531 10AA                        u620 0CC2  
                      u700 0E7C                        u540 10E4                        _ISR 0008  
                      u621 0CBE                        u701 0E78                        u541 10E0  
                      u630 0CF4                        u710 0EBA                        u550 131E  
                      u631 0CF0                        u711 0EB6                        u551 131A  
                      u720 0EE4                        u560 13CA                        u800 08DC  
                      u641 0D1E                        u721 0EE0                        u561 13C6  
                      u801 08D8                        u650 0D42                        u730 0F12  
                      u570 0FAC                        u810 08EA                        u651 0D3E  
                      u731 0F0E                        u571 0FA8                        u811 08E6  
                      u660 0D6C                        u740 0F5A                        u580 0FCE  
                      u820 0A12                        u900 0B20                        u661 0D68  
                      u741 0F56                        u581 0FCA                        u821 0A0E  
                      u901 0B1C                        u670 0DAC                        u590 1024  
                      u830 0A30                        u750 084A                        u910 0B68  
                      u671 0DA8                        u591 1020                        u831 0A2C  
                      u751 0844                        u911 0B64                        u680 0DF6  
                      u840 0A4A                        u760 084C                        u920 0B8C  
                      u681 0DF2                        u841 0A46                        u921 0B88  
                      u690 0E4A                        u850 0A64                        u770 0862  
                      u930 0C30                        u691 0E46                        u851 0A60  
                      u771 085E                        u931 0C2C                        u860 0A74  
                      u780 0892                        u940 12D2                        u861 0A70  
                      u781 088E                        u941 12CE                        u950 1336  
                      u870 0A86                        u790 08AE                        u951 1332  
                      u871 0A82                        u791 08AA                        u960 134C  
                      u880 0A96                        u961 1348                        u881 0A92  
                      u890 0AAE                        u891 0AAA                        u997 1228  
                      _abs 1362                        _pad 0F9C                        wreg 000FE8  
             __CFG_LVP$OFF 000000                       ?_ISR 0001               __CFG_WDT$OFF 000000  
                     l1211 10FA                       ?_abs 0013                       l1213 10FC  
                     l1221 1436                       l1301 0CF4                       l1215 116C  
                     l1223 1440                       l1311 0D4A                       l1303 0D14  
                     l1231 1486                       l1217 1174                       l1225 1446  
                     l1321 0DCC                       l1313 0D5E                       l1305 0D18  
                     l1241 10AE                       l1233 1062                       l1401 098E  
                     l1219 1176                       l1227 144E                       l1331 0E16  
                     l1323 0DCE                       l1315 0D6C                       l1307 0D24  
                     l1243 10E4                       l1235 1074                       l1251 12FA  
                     l1411 0A4A                       l1403 0994                       l1501 11EC  
                     l1325 0DE0                       l1317 0D7E                       l1309 0D42  
                     l1341 0E6A                       l1229 1478                       l1237 1086  
                     l1253 12FE                       l1261 13CA                       l1421 0A9C  
                     l1413 0A64                       l1405 09F8                       l1511 133A  
                     l1503 11F6                       l1319 0DAC                       l1327 0DE6  
                     l1351 0EC2                       l1343 0E6E                       l1335 0E38  
                     l1239 1090                       l1247 12DC                       l1255 13A2  
                     l1271 0FCE                       l1423 0AAE                       l1407 0A12  
                     l1415 0A74                       l1513 134C                       l1505 1322  
                     l1329 0DF6                       l1361 0F44                       l1353 0ED6  
                     l1345 0E7C                       l1337 0E3C                       l1249 12E8  
                     l1257 13AE                       l1281 1034                       l1273 0FDA  
                     l1265 0F9C                       l1425 0ABA                       l1417 0A86  
                     l1409 0A30                       l1441 0B44                       l1433 0AFC  
                     l1521 1416                       l1515 1350                       l1507 1326  
                     l1291 0CB0                       l1355 0EE4                       l1363 0F4A  
                     l1347 0E9C                       l1339 0E4A                       l1259 13B2  
                     l1283 1048                       l1275 0FEE                       l1267 0FAC  
                     l1427 0AC2                       l1419 0A96                       l1371 081A  
                     l1451 0C0C                       l1443 0B68                       l1435 0B20  
                     l1531 120E                       l1517 1356                       l1509 1336  
                     l1293 0CB4                       l1365 0F5A                       l1357 0F12  
                     l1349 0EBA                       l1277 1002                       l1269 0FC0  
                     l1429 0AD2                       l1381 0894                       l1373 083A  
                     l1453 0C30                       l1461 0C5E                       l1445 0B8C  
                     l1437 0B2E                       l1541 1220                       l1533 1212  
                     l1525 1202                       l1295 0CC2                       l1367 0F7A  
                     l1359 0F32                       l1287 1362                       l1279 1006  
                     l1391 08F0                       l1383 08AE                       l1375 0862  
                     l1463 0C6C                       l1455 0C3E                       l1447 0BD4  
                     l1439 0B40                       l1519 140C                       l1551 1258  
                     l1543 1222                       l1535 121A                       l1527 1206  
                     l1297 0CE2                       l1289 137C                       l1393 08F8  
                     l1385 08CA                       l1377 0882                       l1457 0C52  
                     l1481 12B6                       l1545 1230                       l1537 121C  
                     l1529 120A                       l1491 11B6                       l1483 1180  
                     l1299 0CE6                       l1395 0900                       l1387 08DC  
                     l1379 0892                       l1467 0C78                       l1475 127A  
                     l1547 123A                       l1539 121E                       l1493 11BE  
                     l1485 118A                       l1397 0906                       l1389 08EA  
                     l1469 0C9C                       l1477 1282                       l1549 124E  
                     l1495 11C4                       l1487 119A                       l1399 0988  
                     l1479 1290                       l1497 11CA                       l1489 11A0  
                     l1499 11E2                       ?_pad 0017                       STR_1 080F  
                     STR_2 0801                       u1007 1190                       u1017 11A6  
                     u1027 11B8                       u1037 11DA                       u1047 116E  
                     u1057 1178                       i2l43 1402                       i2l45 1408  
                     _TMR2 000FCC               ?_escreve_lcd 0001     envia_byte_lcd@endereco 0004  
                     abs@a 0013                       _dbuf 0069                       _cont 0068  
                     _main 1202                       _dtoa 081A                       _prec 0064  
                     _nout 0060                       pad@i 001E                       pad@p 001B  
                     fsr1h 000FE2                       fsr2h 000FDA                       indf2 000FDF  
                     fsr1l 000FE1                       pad@w 0020                       fsr2l 000FD9  
                     btemp 005F                       prodh 000FF4                       prodl 000FF3  
                     start 000E              __CFG_MCLRE$ON 000000    __end_of_caracter_inicio 1362  
             ___param_bank 000000                      ??_ISR 0001                      ??_abs 0015  
                    ??_pad 001D            __end_of___aodiv 0E38                      ?_main 0001  
                    ?_dtoa 0022            __end_of___aomod 0F9C               vfpfcnvrt@fmt 0048  
                    _TRISD 000F95    __size_of_envia_byte_lcd 0024                      _flags 0066  
                    _fputc 1062                      _fputs 12DC                      pad@fp 0017  
                    _width 0062                      _putch 1484                      dtoa@d 0024  
                    dtoa@i 0044                      dtoa@n 003C                      dtoa@p 0036  
                    dtoa@s 003A                      dtoa@w 0038                      tablat 000FF5  
                    ttemp5 0060                      ttemp6 0063                      ttemp7 0067  
                    status 000FD8                      wtemp8 0060            __initialization 1458  
             __end_of_main 127A               __end_of_dtoa 0AFC                     ??_main 005E  
                   ??_dtoa 002C              __activetblptr 000001                     ?_fputc 0007  
                   ?_fputs 0010                     ?_putch 0001                     _INT0IF 007F91  
                   i2l1553 13DA                     i2l1555 13E8                     i2l1557 13F8  
                   i2l1559 13FC    __size_of_inicializa_lcd 0082           _envia_nibble_lcd 10F8  
             vfprintf@cfmt 005C           ?_caracter_inicio 0005                  ??___aodiv 0011  
                ??___aomod 0011                     clear_0 145E                     _printf 140C  
                   pad@buf 0019                     dtoa@fp 0022                     _strlen 13A2  
                   fputc@c 0007                     fputs@c 0014                     fputs@i 0015  
                   fputs@s 0010               __mediumconst 0000                     tblptrh 000FF7  
                   tblptrl 000FF6                     tblptru 000FF8           __end_of_vfprintf 12DC  
               __accesstop 0060    __end_of__initialization 1464         envia_byte_lcd@dado 0003  
          __CFG_PBADEN$OFF 000000            __CFG_FOSC$XT_XT 000000       __size_of_escreve_lcd 000E  
            ___rparam_used 000001               escreve_lcd@c 0005             __pcstackCOMRAM 0001  
            __end_of_fputc 10F8              __end_of_fputs 1320              __end_of_putch 148E  
           _envia_byte_lcd 1434                    ??_fputc 000B                    ??_fputs 0014  
                  ??_putch 0006                 __pbssBANK0 0060                    ?_printf 0089  
                  ?_strlen 0001     __end_of_envia_byte_lcd 1458                    _INTEDG0 007F8E  
       __size_of_vfpfcnvrt 01B4                    i2u97_40 13E8                    i2u97_41 13E4  
                  i2u98_40 13F8                    i2u98_41 13F4             _inicializa_lcd 1180  
                  __Hparam 0000       caracter_inicio@linha 0006                    __Lparam 0000  
                  ___aodiv 0CB0                    ___aomod 0E38                  ?_vfprintf 0056  
             __psmallconst 0800                    __pcinit 1458                    __ramtop 0800  
                  __ptext0 1202                    __ptext1 140C                    __ptext2 127A  
                  __ptext3 0AFC                    __ptext4 081A                    __ptext5 0F9C  
                  __ptext6 13A2                    __ptext7 12DC                    __ptext8 1062  
                  __ptext9 1484            __size_of_printf 0028            __size_of_strlen 0036  
             __size_of_ISR 1404                  _T2CONbits 000FCA               __size_of_abs 0040  
          ?_envia_byte_lcd 0003               __size_of_pad 00C6   __end_of_envia_nibble_lcd 1180  
   __end_of_inicializa_lcd 1202             __pintcode_body 13D8       end_of_initialization 1464  
                  fputc@fp 0009                    int_func 13D8                    fputs@fp 0012  
        __end_of_vfpfcnvrt 0CB0                    postdec2 000FDD                    postinc0 000FEE  
                  postinc1 000FE6                    postinc2 000FDE                 ??_vfprintf 005C  
                  strlen@a 0003                    strlen@s 0001                  _PORTDbits 000F83  
                _TRISBbits 000F93            ?_inicializa_lcd 0001                vfpfcnvrt@ap 004A  
              vfpfcnvrt@fp 0046                vfpfcnvrt@ll 004E   __size_of_caracter_inicio 0042  
           __end_of_printf 1434             __end_of_strlen 13D8        start_initialization 1458  
              __end_of_ISR 140C                __end_of_abs 13A2                __end_of_pad 1062  
            ??_escreve_lcd 0005     caracter_inicio@posicao 0007                vfprintf@fmt 0058  
                 ??_printf 005E                   ??_strlen 0003              __pcstackBANK0 0089  
         ___aodiv@dividend 0001        __end_of_escreve_lcd 1484                  __pintcode 0008  
                 ?___aodiv 0001                   ?___aomod 0001           ___aodiv@quotient 0013  
         ??_envia_byte_lcd 0004          __size_of_vfprintf 0062                __smallconst 0800  
        ?_envia_nibble_lcd 0001          ??_caracter_inicio 0006             __size_of_fputc 0096  
           __size_of_fputs 0044             __size_of_putch 000A         ??_envia_nibble_lcd 0001  
                _vfpfcnvrt 0AFC           ??_inicializa_lcd 0005                _escreve_lcd 1476  
    caracter_inicio@coluna 0005                   __Hrparam 0000                 vfprintf@ap 005A  
                 __Lrparam 0000                 vfprintf@fp 0056               __Lsmallconst 0800  
         __size_of___aodiv 0188           __size_of___aomod 0164                 ?_vfpfcnvrt 0046  
          ___aodiv@divisor 0009            ___aodiv@counter 0011                   _dtoa$350 0034  
                 __ptext10 1476                   __ptext11 1362                   __ptext12 0E38  
                 __ptext13 0CB0                   __ptext14 1180                   __ptext15 1320  
                 __ptext16 1434                   __ptext17 10F8              __size_of_main 0078  
            __size_of_dtoa 02E2                   int$flags 005F                   _vfprintf 127A  
                printf@fmt 0089           ___aomod@dividend 0001                  putch@data 0006  
               _INTCONbits 000FF2                   intlevel2 0000                   printf@ap 008F  
          ___aomod@divisor 0009                ??_vfpfcnvrt 004C            ___aomod@counter 0011  
          _caracter_inicio 1320       envia_nibble_lcd@dado 0002               ___aodiv@sign 0012  
             ___aomod@sign 0012  __size_of_envia_nibble_lcd 0088  
